// Type definitions for commander
// Original definitions by: Alan Agius <https://github.com/alan-agius4>, Marcelo Dezem <https://github.com/mdezem>, vvakame <https://github.com/vvakame>, Jules Randolph <https://github.com/sveinburne>
// Using method rather than property for method-signature-style, to document method overloads separately. Allow either.
/* eslint-disable @typescript-eslint/method-signature-style */ /* eslint-disable @typescript-eslint/no-explicit-any */ // This is a trick to encourage editor to suggest the known literals while still
// allowing any BaseType value.
// References:
// - https://github.com/microsoft/TypeScript/issues/29729
// - https://github.com/sindresorhus/type-fest/blob/main/source/literal-union.d.ts
// - https://github.com/sindresorhus/type-fest/blob/main/source/primitive.d.ts
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Argument: function() {
        return Argument;
    },
    Command: function() {
        return Command;
    },
    CommanderError: function() {
        return CommanderError;
    },
    Help: function() {
        return Help;
    },
    InvalidArgumentError: function() {
        return InvalidArgumentError;
    },
    InvalidOptionArgumentError: function() {
        return InvalidArgumentError;
    },
    Option: function() {
        return Option;
    },
    program: function() {
        return program;
    }
});
let CommanderError = class CommanderError extends Error {
};
let InvalidArgumentError = class InvalidArgumentError extends CommanderError {
};
let Argument = class Argument {
};
let Option = class Option {
};
let Help = class Help {
};
let Command = class Command {
};
const program;

//# sourceMappingURL=index.d.js.map