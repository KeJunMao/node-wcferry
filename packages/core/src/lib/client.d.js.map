{"version":3,"sources":["../../../../../../../../packages/ws/node_modules/@wcferry/core/src/lib/client.d.ts"],"sourcesContent":["/// <reference types=\"node\" />\nimport { SocketOptions } from '@rustup/nng';\nimport { wcf } from './proto-generated/wcf';\nimport { type ToPlainType } from './utils';\nimport { FileSavableInterface } from './file-ref';\nimport { Message } from './message';\nexport type UserInfo = ToPlainType<wcf.UserInfo>;\nexport type Contact = ToPlainType<wcf.RpcContact>;\nexport type DbTable = ToPlainType<wcf.DbTable>;\nexport interface WcferryOptions {\n    port?: number;\n    /** if host is empty, the program will try to load wcferry.exe and *.dll */\n    host?: string;\n    socketOptions?: SocketOptions;\n    /** the cache dir to hold temp files, defaults to `os.tmpdir()/wcferry`  */\n    cacheDir?: string;\n    recvPyq?: boolean;\n}\nexport declare class Wcferry {\n    readonly NotFriend: {\n        fmessage: string;\n        medianote: string;\n        floatbottle: string;\n        filehelper: string;\n        newsapp: string;\n    };\n    private isMsgReceiving;\n    private msgDispose?;\n    private socket;\n    private readonly localMode;\n    private readonly msgEventSub;\n    private options;\n    constructor(options?: WcferryOptions);\n    private trapOnExit;\n    get connected(): boolean;\n    get msgReceiving(): boolean;\n    private createUrl;\n    /**\n     * 设置是否接受朋友圈消息\n     */\n    set recvPyq(pyq: boolean);\n    get recvPyq(): boolean;\n    private get msgListenerCount();\n    start(): void;\n    execDLL(verb: 'start' | 'stop'): void;\n    stop(): void;\n    private sendRequest;\n    /** 是否已经登录 */\n    isLogin(): boolean;\n    /**获取登录账号wxid */\n    getSelfWxid(): string;\n    /** 获取登录账号个人信息 */\n    getUserInfo(): UserInfo;\n    /** 获取完整通讯录 */\n    getContacts(): Contact[];\n    /** 通过 wxid 查询微信号昵称等信息 */\n    getContact(wxid: string): Contact | undefined;\n    /** 获取所有数据库 */\n    getDbNames(): string[];\n    /** 获取数据库中所有表 */\n    getDbTables(db: string): DbTable[];\n    /**\n     * 执行 SQL 查询，如果数据量大注意分页\n     * @param db\n     * @param sql\n     */\n    dbSqlQuery(db: string, sql: string): Record<string, string | number | Buffer | undefined>[];\n    /**\n     * 获取消息类型\n     * {\"47\": \"石头剪刀布 | 表情图片\", \"62\": \"小视频\", \"43\": \"视频\", \"1\": \"文字\", \"10002\": \"撤回消息\", \"40\": \"POSSIBLEFRIEND_MSG\", \"10000\": \"红包、系统消息\", \"37\": \"好友确认\", \"48\": \"位置\", \"42\": \"名片\", \"49\": \"共享实时位置、文件、转账、链接\", \"3\": \"图片\", \"34\": \"语音\", \"9999\": \"SYSNOTICE\", \"52\": \"VOIPNOTIFY\", \"53\": \"VOIPINVITE\", \"51\": \"微信初始化\", \"50\": \"VOIPMSG\"}\n     */\n    getMsgTypes(): Map<number, string>;\n    /**\n     * 刷新朋友圈\n     * @param id 开始 id，0 为最新页 (string based uint64)\n     * @returns 1 为成功，其他失败\n     */\n    refreshPyq(id: string): number;\n    /** 获取群聊列表 */\n    getChatRooms(): Contact[];\n    /**\n     * 获取好友列表\n     * @returns\n     */\n    getFriends(): Required<{\n        wxid?: string | undefined;\n        code?: string | undefined;\n        remark?: string | undefined;\n        name?: string | undefined;\n        country?: string | undefined;\n        province?: string | undefined;\n        city?: string | undefined;\n        gender?: number | undefined;\n    }>[];\n    /**\n     * 获取群成员\n     * @param roomid 群的 id\n     * @param times 重试次数\n     * @returns 群成员列表: {wxid1: 昵称1, wxid2: 昵称2, ...}\n     */\n    getChatRoomMembers(roomid: string, times?: number): Promise<Record<string, string>>;\n    /**\n     * 获取群成员昵称\n     * @param wxid\n     * @param roomid\n     * @returns 群名片\n     */\n    getAliasInChatRoom(wxid: string, roomid: string): string | undefined;\n    /**\n     * be careful to SQL injection\n     * @param wxids wxids\n     */\n    getNickName(...wxids: string[]): Array<string | undefined>;\n    /**\n     * 邀请群成员\n     * @param roomid\n     * @param wxids\n     * @returns int32 1 为成功，其他失败\n     */\n    inviteChatroomMembers(roomid: string, wxids: string[]): number;\n    /**\n     * 添加群成员\n     * @param roomid\n     * @param wxids\n     * @returns int32 1 为成功，其他失败\n     */\n    addChatRoomMembers(roomid: string, wxids: string[]): number;\n    /**\n     * 删除群成员\n     * @param roomid\n     * @param wxids\n     * @returns int32 1 为成功，其他失败\n     */\n    delChatRoomMembers(roomid: string, wxids: string[]): number;\n    /**\n     * 撤回消息\n     * @param msgid (uint64 in string format): 消息 id\n     * @returns int: 1 为成功，其他失败\n     */\n    revokeMsg(msgid: string): number;\n    /**\n     * 转发消息。可以转发文本、图片、表情、甚至各种 XML；语音也行，不过效果嘛，自己验证吧。\n     * @param msgid (uint64 in string format): 消息 id\n     * @param receiver string 消息接收人，wxid 或者 roomid\n     * @returns int: 1 为成功，其他失败\n     */\n    forwardMsg(msgid: string, receiver: string): number;\n    /**\n     * 发送文本消息\n     * @param msg 要发送的消息，换行使用 `\\n` （单杠）；如果 @ 人的话，需要带上跟 `aters` 里数量相同的 @\n     * @param receiver 消息接收人，wxid 或者 roomid\n     * @param aters 要 @ 的 wxid，多个用逗号分隔；`@所有人` 只需要 `notify@all`\n     * @returns 0 为成功，其他失败\n     */\n    sendTxt(msg: string, receiver: string, aters?: string): number;\n    /**\n     * @param image location of the resource, can be:\n     * - a local path (`C:\\\\Users` or `/home/user`),\n     * - a link starts with `http(s)://`,\n     * - a buffer (base64 string can be convert to buffer by `Buffer.from(<str>, 'base64')`)\n     * - an object { type: 'Buffer', data: number[] } which can convert to Buffer\n     * - a FileSavableInterface instance\n     * @param receiver 消息接收人，wxid 或者 roomid\n     * @returns 0 为成功，其他失败\n     */\n    sendImage(image: string | Buffer | {\n        type: 'Buffer';\n        data: number[];\n    } | FileSavableInterface, receiver: string): Promise<number>;\n    /**\n     * @param file location of the resource, can be:\n     * - a local path (`C:\\\\Users` or `/home/user`),\n     * - a link starts with `http(s)://`,\n     * - a buffer (base64 string can be convert to buffer by `Buffer.from(<str>, 'base64')`)\n     * - an object { type: 'Buffer', data: number[] } which can convert to Buffer\n     * - a FileSavableInterface instance\n     * @param receiver 消息接收人，wxid 或者 roomid\n     * @returns 0 为成功，其他失败\n     */\n    sendFile(file: string | Buffer | {\n        type: 'Buffer';\n        data: number[];\n    } | FileSavableInterface, receiver: string): Promise<number>;\n    /**\n     * @deprecated Not supported\n     * 发送XML\n     * @param xml.content xml 内容\n     * @param xml.path 封面图片路径\n     * @param receiver xml 类型，如：0x21 为小程序\n     * @returns 0 为成功，其他失败\n     */\n    sendXML(xml: {\n        content: string;\n        path?: string;\n        type: number;\n    }, receiver: string): number;\n    /**\n     * @deprecated Not supported\n     * 发送表情\n     * @param path 本地表情路径，如：`C:/Projs/WeChatRobot/emo.gif`\n     * @param receiver 消息接收人，wxid 或者 roomid\n     * @returns 0 为成功，其他失败\n     */\n    sendEmotion(path: string, receiver: string): number;\n    /**\n     * 发送富文本消息\n     *  卡片样式：\n     *       |-------------------------------------|\n     *       |title, 最长两行\n     *       |(长标题, 标题短的话这行没有)\n     *       |digest, 最多三行，会占位    |--------|\n     *       |digest, 最多三行，会占位    |thumburl|\n     *       |digest, 最多三行，会占位    |--------|\n     *       |(account logo) name\n     *       |-------------------------------------|\n     * @param desc.name 左下显示的名字\n     * @param desc.account 填公众号 id 可以显示对应的头像（gh_ 开头的）\n     * @param desc.title 标题，最多两行\n     * @param desc.digest 摘要，三行\n     * @param desc.url 点击后跳转的链接\n     * @param desc.thumburl 缩略图的链接\n     * @param receiver 接收人, wxid 或者 roomid\n     * @returns 0 为成功，其他失败\n     */\n    sendRichText(desc: Omit<ReturnType<wcf.RichText['toObject']>, 'receiver'>, receiver: string): number;\n    /**\n     * 拍一拍群友\n     * @param roomid 群 id\n     * @param wxid 要拍的群友的 wxid\n     * @returns 1 为成功，其他失败\n     */\n    sendPat(roomid: string, wxid: string): number;\n    /**\n     * 获取语音消息并转成 MP3\n     * @param msgid 语音消息 id\n     * @param dir MP3 保存目录（目录不存在会出错）\n     * @param times 超时时间（秒）\n     * @returns 成功返回存储路径；空字符串为失败，原因见日志。\n     */\n    getAudioMsg(msgid: string, dir: string, times?: number): Promise<string>;\n    /**\n     * 获取 OCR 结果。鸡肋，需要图片能自动下载；通过下载接口下载的图片无法识别。\n     * @param extra 待识别的图片路径，消息里的 extra\n     * @param times OCR 结果\n     * @returns\n     */\n    getOCRResult(extra: string, times?: number): Promise<string>;\n    /**\n     * @deprecated 下载附件（图片、视频、文件）。这方法别直接调用，下载图片使用 `download_image`\n     * @param msgid 消息中 id\n     * @param thumb 消息中的 thumb\n     * @param extra 消息中的 extra\n     * @returns 0 为成功, 其他失败。\n     */\n    downloadAttach(msgid: string, thumb?: string, extra?: string): number;\n    private readonly UserDir;\n    private getMsgAttachments;\n    /**\n     * @deprecated 解密图片。这方法别直接调用，下载图片使用 `download_image`。\n     * @param src 加密的图片路径\n     * @param dir 保存图片的目录\n     * @returns\n     */\n    decryptImage(src: string, dir: string): string;\n    /**\n     * 下载图片\n     * @param msgid 消息中 id\n     * @param dir 存放图片的目录（目录不存在会出错）\n     * @param extra 消息中的 extra, 如果为空，自动通过msgid获取\n     * @param times 超时时间（秒）\n     * @returns 成功返回存储路径；空字符串为失败，原因见日志。\n     */\n    downloadImage(msgid: string, dir: string, extra?: string, thumb?: string, times?: number): Promise<string>;\n    /**\n     * 通过好友申请\n     * @param v3 加密用户名 (好友申请消息里 v3 开头的字符串)\n     * @param v4 Ticket (好友申请消息里 v4 开头的字符串)\n     * @param scene 申请方式 (好友申请消息里的 scene); 为了兼容旧接口，默认为扫码添加 (30)\n     * @returns 1 为成功，其他失败\n     */\n    acceptNewFriend(v3: string, v4: string, scene?: number): number;\n    /**\n     * 接收转账\n     * @param wxid 转账消息里的发送人 wxid\n     * @param transferid 转账消息里的 transferid\n     * @param transactionid 转账消息里的 transactionid\n     * @returns 1 为成功，其他失败\n     */\n    receiveTransfer(wxid: string, transferid: string, transactionid: string): number;\n    /**\n     * @internal 允许接收消息,自动根据on(...)注册的listener调用\n     * @param pyq\n     * @returns\n     */\n    private enableMsgReceiving;\n    /**\n     * @internal 停止接收消息,自动根据on(...)注册/注销的listener 调用\n     * @param force\n     * @returns\n     */\n    private disableMsgReceiving;\n    private receiveMessage;\n    private messageCallback;\n    /**\n     * 注册消息回调监听函数(listener), 通过call返回的函数注销\n     * 当注册的监听函数数量大于0是自动调用enableMsgReceiving,否则自动调用disableMsgReceiving\n     * 设置wcferry.recvPyq = true/false 来开启关闭接受朋友圈消息\n     * @param callback 监听函数\n     * @returns 注销监听函数\n     */\n    on(callback: (msg: Message) => void): () => void;\n}\n//# sourceMappingURL=client.d.ts.map"],"names":[],"mappings":"AAAA,8BAA8B;;;;;CAwT9B,oCAAoC"}