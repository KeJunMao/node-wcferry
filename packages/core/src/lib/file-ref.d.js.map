{"version":3,"sources":["../../../../../../../../packages/ws/node_modules/@wcferry/core/src/lib/file-ref.d.ts"],"sourcesContent":["/// <reference types=\"node\" />\n/// <reference types=\"node\" />\nimport type { OutgoingHttpHeaders } from 'http';\nexport interface FileSavableInterface {\n    save(dir?: string): Promise<{\n        path: string;\n        discard: () => Promise<void>;\n    }>;\n}\nexport declare class FileRef implements FileSavableInterface {\n    private readonly location;\n    private readonly options;\n    /**\n     * @param location location of the resource. can be\n     * - a local path\n     * - a link starts with `http(s)://`\n     * - a buffer\n     *\n     * Note: base64 string can be convert to buffer by: `Buffer.from('content', 'base64')`\n     * Note: if input is a Buffer, it would be nice to have a name with correct extension in the options,\n     * or a common name `<uuid>.dat` will be used\n     */\n    constructor(location: string | Buffer, options?: {\n        name?: string;\n        headers?: OutgoingHttpHeaders;\n    });\n    private isUrl;\n    /**\n     * save the file into dir with name and extension inferred\n     * @param dir the saving directory, defaults to `os.tmpdir()`\n     * @param cpLocal when the source is local file, if we copy it to dir or directly return the source path\n     * @returns\n     */\n    save(dir?: string, cpLocal?: boolean): Promise<{\n        path: string;\n        discard: () => Promise<void>;\n    }>;\n    wrapWithDiscard(p: string): {\n        path: string;\n        discard: () => Promise<void>;\n    };\n    private getName;\n    private getSavingPath;\n    private saveFromBase64;\n    private saveFromUrl;\n    private saveFromFile;\n}\n//# sourceMappingURL=file-ref.d.ts.map"],"names":[],"mappings":"AAAA,8BAA8B;AAC9B,8BAA8B;;;;;CA8C9B,sCAAsC"}