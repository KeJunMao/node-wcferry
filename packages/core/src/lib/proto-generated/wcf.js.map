{"version":3,"sources":["../../../../../../packages/core/src/lib/proto-generated/wcf.ts"],"sourcesContent":["/* eslint-disable */\n //@ts-nocheck\n/**\n * Generated by the protoc-gen-ts.  DO NOT EDIT!\n * compiler version: 5.27.1\n * source: wcf.proto\n * git: https://github.com/thesayyn/protoc-gen-ts */\nimport * as pb_1 from \"google-protobuf\";\nexport namespace wcf {\n    export enum Functions {\n        FUNC_RESERVED = 0,\n        FUNC_IS_LOGIN = 1,\n        FUNC_GET_SELF_WXID = 16,\n        FUNC_GET_MSG_TYPES = 17,\n        FUNC_GET_CONTACTS = 18,\n        FUNC_GET_DB_NAMES = 19,\n        FUNC_GET_DB_TABLES = 20,\n        FUNC_GET_USER_INFO = 21,\n        FUNC_GET_AUDIO_MSG = 22,\n        FUNC_SEND_TXT = 32,\n        FUNC_SEND_IMG = 33,\n        FUNC_SEND_FILE = 34,\n        FUNC_SEND_XML = 35,\n        FUNC_SEND_EMOTION = 36,\n        FUNC_SEND_RICH_TXT = 37,\n        FUNC_SEND_PAT_MSG = 38,\n        FUNC_FORWARD_MSG = 39,\n        FUNC_ENABLE_RECV_TXT = 48,\n        FUNC_DISABLE_RECV_TXT = 64,\n        FUNC_EXEC_DB_QUERY = 80,\n        FUNC_ACCEPT_FRIEND = 81,\n        FUNC_RECV_TRANSFER = 82,\n        FUNC_REFRESH_PYQ = 83,\n        FUNC_DOWNLOAD_ATTACH = 84,\n        FUNC_GET_CONTACT_INFO = 85,\n        FUNC_REVOKE_MSG = 86,\n        FUNC_REFRESH_QRCODE = 87,\n        FUNC_DECRYPT_IMAGE = 96,\n        FUNC_EXEC_OCR = 97,\n        FUNC_ADD_ROOM_MEMBERS = 112,\n        FUNC_DEL_ROOM_MEMBERS = 113,\n        FUNC_INV_ROOM_MEMBERS = 114\n    }\n    export class Request extends pb_1.Message {\n        #one_of_decls: number[][] = [[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]];\n        constructor(data?: any[] | ({\n            func?: Functions;\n        } & (({\n            empty?: Empty;\n            str?: never;\n            txt?: never;\n            file?: never;\n            query?: never;\n            v?: never;\n            m?: never;\n            xml?: never;\n            dec?: never;\n            tf?: never;\n            ui64?: never;\n            flag?: never;\n            att?: never;\n            am?: never;\n            rt?: never;\n            pm?: never;\n            fm?: never;\n        } | {\n            empty?: never;\n            str?: string;\n            txt?: never;\n            file?: never;\n            query?: never;\n            v?: never;\n            m?: never;\n            xml?: never;\n            dec?: never;\n            tf?: never;\n            ui64?: never;\n            flag?: never;\n            att?: never;\n            am?: never;\n            rt?: never;\n            pm?: never;\n            fm?: never;\n        } | {\n            empty?: never;\n            str?: never;\n            txt?: TextMsg;\n            file?: never;\n            query?: never;\n            v?: never;\n            m?: never;\n            xml?: never;\n            dec?: never;\n            tf?: never;\n            ui64?: never;\n            flag?: never;\n            att?: never;\n            am?: never;\n            rt?: never;\n            pm?: never;\n            fm?: never;\n        } | {\n            empty?: never;\n            str?: never;\n            txt?: never;\n            file?: PathMsg;\n            query?: never;\n            v?: never;\n            m?: never;\n            xml?: never;\n            dec?: never;\n            tf?: never;\n            ui64?: never;\n            flag?: never;\n            att?: never;\n            am?: never;\n            rt?: never;\n            pm?: never;\n            fm?: never;\n        } | {\n            empty?: never;\n            str?: never;\n            txt?: never;\n            file?: never;\n            query?: DbQuery;\n            v?: never;\n            m?: never;\n            xml?: never;\n            dec?: never;\n            tf?: never;\n            ui64?: never;\n            flag?: never;\n            att?: never;\n            am?: never;\n            rt?: never;\n            pm?: never;\n            fm?: never;\n        } | {\n            empty?: never;\n            str?: never;\n            txt?: never;\n            file?: never;\n            query?: never;\n            v?: Verification;\n            m?: never;\n            xml?: never;\n            dec?: never;\n            tf?: never;\n            ui64?: never;\n            flag?: never;\n            att?: never;\n            am?: never;\n            rt?: never;\n            pm?: never;\n            fm?: never;\n        } | {\n            empty?: never;\n            str?: never;\n            txt?: never;\n            file?: never;\n            query?: never;\n            v?: never;\n            m?: MemberMgmt;\n            xml?: never;\n            dec?: never;\n            tf?: never;\n            ui64?: never;\n            flag?: never;\n            att?: never;\n            am?: never;\n            rt?: never;\n            pm?: never;\n            fm?: never;\n        } | {\n            empty?: never;\n            str?: never;\n            txt?: never;\n            file?: never;\n            query?: never;\n            v?: never;\n            m?: never;\n            xml?: XmlMsg;\n            dec?: never;\n            tf?: never;\n            ui64?: never;\n            flag?: never;\n            att?: never;\n            am?: never;\n            rt?: never;\n            pm?: never;\n            fm?: never;\n        } | {\n            empty?: never;\n            str?: never;\n            txt?: never;\n            file?: never;\n            query?: never;\n            v?: never;\n            m?: never;\n            xml?: never;\n            dec?: DecPath;\n            tf?: never;\n            ui64?: never;\n            flag?: never;\n            att?: never;\n            am?: never;\n            rt?: never;\n            pm?: never;\n            fm?: never;\n        } | {\n            empty?: never;\n            str?: never;\n            txt?: never;\n            file?: never;\n            query?: never;\n            v?: never;\n            m?: never;\n            xml?: never;\n            dec?: never;\n            tf?: Transfer;\n            ui64?: never;\n            flag?: never;\n            att?: never;\n            am?: never;\n            rt?: never;\n            pm?: never;\n            fm?: never;\n        } | {\n            empty?: never;\n            str?: never;\n            txt?: never;\n            file?: never;\n            query?: never;\n            v?: never;\n            m?: never;\n            xml?: never;\n            dec?: never;\n            tf?: never;\n            ui64?: string;\n            flag?: never;\n            att?: never;\n            am?: never;\n            rt?: never;\n            pm?: never;\n            fm?: never;\n        } | {\n            empty?: never;\n            str?: never;\n            txt?: never;\n            file?: never;\n            query?: never;\n            v?: never;\n            m?: never;\n            xml?: never;\n            dec?: never;\n            tf?: never;\n            ui64?: never;\n            flag?: boolean;\n            att?: never;\n            am?: never;\n            rt?: never;\n            pm?: never;\n            fm?: never;\n        } | {\n            empty?: never;\n            str?: never;\n            txt?: never;\n            file?: never;\n            query?: never;\n            v?: never;\n            m?: never;\n            xml?: never;\n            dec?: never;\n            tf?: never;\n            ui64?: never;\n            flag?: never;\n            att?: AttachMsg;\n            am?: never;\n            rt?: never;\n            pm?: never;\n            fm?: never;\n        } | {\n            empty?: never;\n            str?: never;\n            txt?: never;\n            file?: never;\n            query?: never;\n            v?: never;\n            m?: never;\n            xml?: never;\n            dec?: never;\n            tf?: never;\n            ui64?: never;\n            flag?: never;\n            att?: never;\n            am?: AudioMsg;\n            rt?: never;\n            pm?: never;\n            fm?: never;\n        } | {\n            empty?: never;\n            str?: never;\n            txt?: never;\n            file?: never;\n            query?: never;\n            v?: never;\n            m?: never;\n            xml?: never;\n            dec?: never;\n            tf?: never;\n            ui64?: never;\n            flag?: never;\n            att?: never;\n            am?: never;\n            rt?: RichText;\n            pm?: never;\n            fm?: never;\n        } | {\n            empty?: never;\n            str?: never;\n            txt?: never;\n            file?: never;\n            query?: never;\n            v?: never;\n            m?: never;\n            xml?: never;\n            dec?: never;\n            tf?: never;\n            ui64?: never;\n            flag?: never;\n            att?: never;\n            am?: never;\n            rt?: never;\n            pm?: PatMsg;\n            fm?: never;\n        } | {\n            empty?: never;\n            str?: never;\n            txt?: never;\n            file?: never;\n            query?: never;\n            v?: never;\n            m?: never;\n            xml?: never;\n            dec?: never;\n            tf?: never;\n            ui64?: never;\n            flag?: never;\n            att?: never;\n            am?: never;\n            rt?: never;\n            pm?: never;\n            fm?: ForwardMsg;\n        })))) {\n            super();\n            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"func\" in data && data.func != undefined) {\n                    this.func = data.func;\n                }\n                if (\"empty\" in data && data.empty != undefined) {\n                    this.empty = data.empty;\n                }\n                if (\"str\" in data && data.str != undefined) {\n                    this.str = data.str;\n                }\n                if (\"txt\" in data && data.txt != undefined) {\n                    this.txt = data.txt;\n                }\n                if (\"file\" in data && data.file != undefined) {\n                    this.file = data.file;\n                }\n                if (\"query\" in data && data.query != undefined) {\n                    this.query = data.query;\n                }\n                if (\"v\" in data && data.v != undefined) {\n                    this.v = data.v;\n                }\n                if (\"m\" in data && data.m != undefined) {\n                    this.m = data.m;\n                }\n                if (\"xml\" in data && data.xml != undefined) {\n                    this.xml = data.xml;\n                }\n                if (\"dec\" in data && data.dec != undefined) {\n                    this.dec = data.dec;\n                }\n                if (\"tf\" in data && data.tf != undefined) {\n                    this.tf = data.tf;\n                }\n                if (\"ui64\" in data && data.ui64 != undefined) {\n                    this.ui64 = data.ui64;\n                }\n                if (\"flag\" in data && data.flag != undefined) {\n                    this.flag = data.flag;\n                }\n                if (\"att\" in data && data.att != undefined) {\n                    this.att = data.att;\n                }\n                if (\"am\" in data && data.am != undefined) {\n                    this.am = data.am;\n                }\n                if (\"rt\" in data && data.rt != undefined) {\n                    this.rt = data.rt;\n                }\n                if (\"pm\" in data && data.pm != undefined) {\n                    this.pm = data.pm;\n                }\n                if (\"fm\" in data && data.fm != undefined) {\n                    this.fm = data.fm;\n                }\n            }\n        }\n        get func() {\n            return pb_1.Message.getFieldWithDefault(this, 1, Functions.FUNC_RESERVED) as Functions;\n        }\n        set func(value: Functions) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get empty() {\n            return pb_1.Message.getWrapperField(this, Empty, 2) as Empty;\n        }\n        set empty(value: Empty) {\n            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);\n        }\n        get has_empty() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        get str() {\n            return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n        }\n        set str(value: string) {\n            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);\n        }\n        get has_str() {\n            return pb_1.Message.getField(this, 3) != null;\n        }\n        get txt() {\n            return pb_1.Message.getWrapperField(this, TextMsg, 4) as TextMsg;\n        }\n        set txt(value: TextMsg) {\n            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);\n        }\n        get has_txt() {\n            return pb_1.Message.getField(this, 4) != null;\n        }\n        get file() {\n            return pb_1.Message.getWrapperField(this, PathMsg, 5) as PathMsg;\n        }\n        set file(value: PathMsg) {\n            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);\n        }\n        get has_file() {\n            return pb_1.Message.getField(this, 5) != null;\n        }\n        get query() {\n            return pb_1.Message.getWrapperField(this, DbQuery, 6) as DbQuery;\n        }\n        set query(value: DbQuery) {\n            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);\n        }\n        get has_query() {\n            return pb_1.Message.getField(this, 6) != null;\n        }\n        get v() {\n            return pb_1.Message.getWrapperField(this, Verification, 7) as Verification;\n        }\n        set v(value: Verification) {\n            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);\n        }\n        get has_v() {\n            return pb_1.Message.getField(this, 7) != null;\n        }\n        get m() {\n            return pb_1.Message.getWrapperField(this, MemberMgmt, 8) as MemberMgmt;\n        }\n        set m(value: MemberMgmt) {\n            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);\n        }\n        get has_m() {\n            return pb_1.Message.getField(this, 8) != null;\n        }\n        get xml() {\n            return pb_1.Message.getWrapperField(this, XmlMsg, 9) as XmlMsg;\n        }\n        set xml(value: XmlMsg) {\n            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);\n        }\n        get has_xml() {\n            return pb_1.Message.getField(this, 9) != null;\n        }\n        get dec() {\n            return pb_1.Message.getWrapperField(this, DecPath, 10) as DecPath;\n        }\n        set dec(value: DecPath) {\n            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);\n        }\n        get has_dec() {\n            return pb_1.Message.getField(this, 10) != null;\n        }\n        get tf() {\n            return pb_1.Message.getWrapperField(this, Transfer, 11) as Transfer;\n        }\n        set tf(value: Transfer) {\n            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);\n        }\n        get has_tf() {\n            return pb_1.Message.getField(this, 11) != null;\n        }\n        get ui64() {\n            return pb_1.Message.getFieldWithDefault(this, 12, \"0\") as string;\n        }\n        set ui64(value: string) {\n            pb_1.Message.setOneofField(this, 12, this.#one_of_decls[0], value);\n        }\n        get has_ui64() {\n            return pb_1.Message.getField(this, 12) != null;\n        }\n        get flag() {\n            return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;\n        }\n        set flag(value: boolean) {\n            pb_1.Message.setOneofField(this, 13, this.#one_of_decls[0], value);\n        }\n        get has_flag() {\n            return pb_1.Message.getField(this, 13) != null;\n        }\n        get att() {\n            return pb_1.Message.getWrapperField(this, AttachMsg, 14) as AttachMsg;\n        }\n        set att(value: AttachMsg) {\n            pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);\n        }\n        get has_att() {\n            return pb_1.Message.getField(this, 14) != null;\n        }\n        get am() {\n            return pb_1.Message.getWrapperField(this, AudioMsg, 15) as AudioMsg;\n        }\n        set am(value: AudioMsg) {\n            pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[0], value);\n        }\n        get has_am() {\n            return pb_1.Message.getField(this, 15) != null;\n        }\n        get rt() {\n            return pb_1.Message.getWrapperField(this, RichText, 16) as RichText;\n        }\n        set rt(value: RichText) {\n            pb_1.Message.setOneofWrapperField(this, 16, this.#one_of_decls[0], value);\n        }\n        get has_rt() {\n            return pb_1.Message.getField(this, 16) != null;\n        }\n        get pm() {\n            return pb_1.Message.getWrapperField(this, PatMsg, 17) as PatMsg;\n        }\n        set pm(value: PatMsg) {\n            pb_1.Message.setOneofWrapperField(this, 17, this.#one_of_decls[0], value);\n        }\n        get has_pm() {\n            return pb_1.Message.getField(this, 17) != null;\n        }\n        get fm() {\n            return pb_1.Message.getWrapperField(this, ForwardMsg, 18) as ForwardMsg;\n        }\n        set fm(value: ForwardMsg) {\n            pb_1.Message.setOneofWrapperField(this, 18, this.#one_of_decls[0], value);\n        }\n        get has_fm() {\n            return pb_1.Message.getField(this, 18) != null;\n        }\n        get msg() {\n            const cases: {\n                [index: number]: \"none\" | \"empty\" | \"str\" | \"txt\" | \"file\" | \"query\" | \"v\" | \"m\" | \"xml\" | \"dec\" | \"tf\" | \"ui64\" | \"flag\" | \"att\" | \"am\" | \"rt\" | \"pm\" | \"fm\";\n            } = {\n                0: \"none\",\n                2: \"empty\",\n                3: \"str\",\n                4: \"txt\",\n                5: \"file\",\n                6: \"query\",\n                7: \"v\",\n                8: \"m\",\n                9: \"xml\",\n                10: \"dec\",\n                11: \"tf\",\n                12: \"ui64\",\n                13: \"flag\",\n                14: \"att\",\n                15: \"am\",\n                16: \"rt\",\n                17: \"pm\",\n                18: \"fm\"\n            };\n            return cases[pb_1.Message.computeOneofCase(this, [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])];\n        }\n        static fromObject(data: {\n            func?: Functions;\n            empty?: ReturnType<typeof Empty.prototype.toObject>;\n            str?: string;\n            txt?: ReturnType<typeof TextMsg.prototype.toObject>;\n            file?: ReturnType<typeof PathMsg.prototype.toObject>;\n            query?: ReturnType<typeof DbQuery.prototype.toObject>;\n            v?: ReturnType<typeof Verification.prototype.toObject>;\n            m?: ReturnType<typeof MemberMgmt.prototype.toObject>;\n            xml?: ReturnType<typeof XmlMsg.prototype.toObject>;\n            dec?: ReturnType<typeof DecPath.prototype.toObject>;\n            tf?: ReturnType<typeof Transfer.prototype.toObject>;\n            ui64?: string;\n            flag?: boolean;\n            att?: ReturnType<typeof AttachMsg.prototype.toObject>;\n            am?: ReturnType<typeof AudioMsg.prototype.toObject>;\n            rt?: ReturnType<typeof RichText.prototype.toObject>;\n            pm?: ReturnType<typeof PatMsg.prototype.toObject>;\n            fm?: ReturnType<typeof ForwardMsg.prototype.toObject>;\n        }): Request {\n            const message = new Request({});\n            if (data.func != null) {\n                message.func = data.func;\n            }\n            if (data.empty != null) {\n                message.empty = Empty.fromObject(data.empty);\n            }\n            if (data.str != null) {\n                message.str = data.str;\n            }\n            if (data.txt != null) {\n                message.txt = TextMsg.fromObject(data.txt);\n            }\n            if (data.file != null) {\n                message.file = PathMsg.fromObject(data.file);\n            }\n            if (data.query != null) {\n                message.query = DbQuery.fromObject(data.query);\n            }\n            if (data.v != null) {\n                message.v = Verification.fromObject(data.v);\n            }\n            if (data.m != null) {\n                message.m = MemberMgmt.fromObject(data.m);\n            }\n            if (data.xml != null) {\n                message.xml = XmlMsg.fromObject(data.xml);\n            }\n            if (data.dec != null) {\n                message.dec = DecPath.fromObject(data.dec);\n            }\n            if (data.tf != null) {\n                message.tf = Transfer.fromObject(data.tf);\n            }\n            if (data.ui64 != null) {\n                message.ui64 = data.ui64;\n            }\n            if (data.flag != null) {\n                message.flag = data.flag;\n            }\n            if (data.att != null) {\n                message.att = AttachMsg.fromObject(data.att);\n            }\n            if (data.am != null) {\n                message.am = AudioMsg.fromObject(data.am);\n            }\n            if (data.rt != null) {\n                message.rt = RichText.fromObject(data.rt);\n            }\n            if (data.pm != null) {\n                message.pm = PatMsg.fromObject(data.pm);\n            }\n            if (data.fm != null) {\n                message.fm = ForwardMsg.fromObject(data.fm);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                func?: Functions;\n                empty?: ReturnType<typeof Empty.prototype.toObject>;\n                str?: string;\n                txt?: ReturnType<typeof TextMsg.prototype.toObject>;\n                file?: ReturnType<typeof PathMsg.prototype.toObject>;\n                query?: ReturnType<typeof DbQuery.prototype.toObject>;\n                v?: ReturnType<typeof Verification.prototype.toObject>;\n                m?: ReturnType<typeof MemberMgmt.prototype.toObject>;\n                xml?: ReturnType<typeof XmlMsg.prototype.toObject>;\n                dec?: ReturnType<typeof DecPath.prototype.toObject>;\n                tf?: ReturnType<typeof Transfer.prototype.toObject>;\n                ui64?: string;\n                flag?: boolean;\n                att?: ReturnType<typeof AttachMsg.prototype.toObject>;\n                am?: ReturnType<typeof AudioMsg.prototype.toObject>;\n                rt?: ReturnType<typeof RichText.prototype.toObject>;\n                pm?: ReturnType<typeof PatMsg.prototype.toObject>;\n                fm?: ReturnType<typeof ForwardMsg.prototype.toObject>;\n            } = {};\n            if (this.func != null) {\n                data.func = this.func;\n            }\n            if (this.empty != null) {\n                data.empty = this.empty.toObject();\n            }\n            if (this.str != null) {\n                data.str = this.str;\n            }\n            if (this.txt != null) {\n                data.txt = this.txt.toObject();\n            }\n            if (this.file != null) {\n                data.file = this.file.toObject();\n            }\n            if (this.query != null) {\n                data.query = this.query.toObject();\n            }\n            if (this.v != null) {\n                data.v = this.v.toObject();\n            }\n            if (this.m != null) {\n                data.m = this.m.toObject();\n            }\n            if (this.xml != null) {\n                data.xml = this.xml.toObject();\n            }\n            if (this.dec != null) {\n                data.dec = this.dec.toObject();\n            }\n            if (this.tf != null) {\n                data.tf = this.tf.toObject();\n            }\n            if (this.ui64 != null) {\n                data.ui64 = this.ui64;\n            }\n            if (this.flag != null) {\n                data.flag = this.flag;\n            }\n            if (this.att != null) {\n                data.att = this.att.toObject();\n            }\n            if (this.am != null) {\n                data.am = this.am.toObject();\n            }\n            if (this.rt != null) {\n                data.rt = this.rt.toObject();\n            }\n            if (this.pm != null) {\n                data.pm = this.pm.toObject();\n            }\n            if (this.fm != null) {\n                data.fm = this.fm.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.func != Functions.FUNC_RESERVED)\n                writer.writeEnum(1, this.func);\n            if (this.has_empty)\n                writer.writeMessage(2, this.empty, () => this.empty.serialize(writer));\n            if (this.has_str)\n                writer.writeString(3, this.str);\n            if (this.has_txt)\n                writer.writeMessage(4, this.txt, () => this.txt.serialize(writer));\n            if (this.has_file)\n                writer.writeMessage(5, this.file, () => this.file.serialize(writer));\n            if (this.has_query)\n                writer.writeMessage(6, this.query, () => this.query.serialize(writer));\n            if (this.has_v)\n                writer.writeMessage(7, this.v, () => this.v.serialize(writer));\n            if (this.has_m)\n                writer.writeMessage(8, this.m, () => this.m.serialize(writer));\n            if (this.has_xml)\n                writer.writeMessage(9, this.xml, () => this.xml.serialize(writer));\n            if (this.has_dec)\n                writer.writeMessage(10, this.dec, () => this.dec.serialize(writer));\n            if (this.has_tf)\n                writer.writeMessage(11, this.tf, () => this.tf.serialize(writer));\n            if (this.has_ui64)\n                writer.writeUint64String(12, this.ui64);\n            if (this.has_flag)\n                writer.writeBool(13, this.flag);\n            if (this.has_att)\n                writer.writeMessage(14, this.att, () => this.att.serialize(writer));\n            if (this.has_am)\n                writer.writeMessage(15, this.am, () => this.am.serialize(writer));\n            if (this.has_rt)\n                writer.writeMessage(16, this.rt, () => this.rt.serialize(writer));\n            if (this.has_pm)\n                writer.writeMessage(17, this.pm, () => this.pm.serialize(writer));\n            if (this.has_fm)\n                writer.writeMessage(18, this.fm, () => this.fm.serialize(writer));\n            if (!w)\n                return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Request {\n            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Request();\n            while (reader.nextField()) {\n                if (reader.isEndGroup())\n                    break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.func = reader.readEnum();\n                        break;\n                    case 2:\n                        reader.readMessage(message.empty, () => message.empty = Empty.deserialize(reader));\n                        break;\n                    case 3:\n                        message.str = reader.readString();\n                        break;\n                    case 4:\n                        reader.readMessage(message.txt, () => message.txt = TextMsg.deserialize(reader));\n                        break;\n                    case 5:\n                        reader.readMessage(message.file, () => message.file = PathMsg.deserialize(reader));\n                        break;\n                    case 6:\n                        reader.readMessage(message.query, () => message.query = DbQuery.deserialize(reader));\n                        break;\n                    case 7:\n                        reader.readMessage(message.v, () => message.v = Verification.deserialize(reader));\n                        break;\n                    case 8:\n                        reader.readMessage(message.m, () => message.m = MemberMgmt.deserialize(reader));\n                        break;\n                    case 9:\n                        reader.readMessage(message.xml, () => message.xml = XmlMsg.deserialize(reader));\n                        break;\n                    case 10:\n                        reader.readMessage(message.dec, () => message.dec = DecPath.deserialize(reader));\n                        break;\n                    case 11:\n                        reader.readMessage(message.tf, () => message.tf = Transfer.deserialize(reader));\n                        break;\n                    case 12:\n                        message.ui64 = reader.readUint64String();\n                        break;\n                    case 13:\n                        message.flag = reader.readBool();\n                        break;\n                    case 14:\n                        reader.readMessage(message.att, () => message.att = AttachMsg.deserialize(reader));\n                        break;\n                    case 15:\n                        reader.readMessage(message.am, () => message.am = AudioMsg.deserialize(reader));\n                        break;\n                    case 16:\n                        reader.readMessage(message.rt, () => message.rt = RichText.deserialize(reader));\n                        break;\n                    case 17:\n                        reader.readMessage(message.pm, () => message.pm = PatMsg.deserialize(reader));\n                        break;\n                    case 18:\n                        reader.readMessage(message.fm, () => message.fm = ForwardMsg.deserialize(reader));\n                        break;\n                    default: reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): Request {\n            return Request.deserialize(bytes);\n        }\n    }\n    export class Response extends pb_1.Message {\n        #one_of_decls: number[][] = [[2, 3, 4, 5, 6, 7, 8, 9, 10, 11]];\n        constructor(data?: any[] | ({\n            func?: Functions;\n        } & (({\n            status?: number;\n            str?: never;\n            wxmsg?: never;\n            types?: never;\n            contacts?: never;\n            dbs?: never;\n            tables?: never;\n            rows?: never;\n            ui?: never;\n            ocr?: never;\n        } | {\n            status?: never;\n            str?: string;\n            wxmsg?: never;\n            types?: never;\n            contacts?: never;\n            dbs?: never;\n            tables?: never;\n            rows?: never;\n            ui?: never;\n            ocr?: never;\n        } | {\n            status?: never;\n            str?: never;\n            wxmsg?: WxMsg;\n            types?: never;\n            contacts?: never;\n            dbs?: never;\n            tables?: never;\n            rows?: never;\n            ui?: never;\n            ocr?: never;\n        } | {\n            status?: never;\n            str?: never;\n            wxmsg?: never;\n            types?: MsgTypes;\n            contacts?: never;\n            dbs?: never;\n            tables?: never;\n            rows?: never;\n            ui?: never;\n            ocr?: never;\n        } | {\n            status?: never;\n            str?: never;\n            wxmsg?: never;\n            types?: never;\n            contacts?: RpcContacts;\n            dbs?: never;\n            tables?: never;\n            rows?: never;\n            ui?: never;\n            ocr?: never;\n        } | {\n            status?: never;\n            str?: never;\n            wxmsg?: never;\n            types?: never;\n            contacts?: never;\n            dbs?: DbNames;\n            tables?: never;\n            rows?: never;\n            ui?: never;\n            ocr?: never;\n        } | {\n            status?: never;\n            str?: never;\n            wxmsg?: never;\n            types?: never;\n            contacts?: never;\n            dbs?: never;\n            tables?: DbTables;\n            rows?: never;\n            ui?: never;\n            ocr?: never;\n        } | {\n            status?: never;\n            str?: never;\n            wxmsg?: never;\n            types?: never;\n            contacts?: never;\n            dbs?: never;\n            tables?: never;\n            rows?: DbRows;\n            ui?: never;\n            ocr?: never;\n        } | {\n            status?: never;\n            str?: never;\n            wxmsg?: never;\n            types?: never;\n            contacts?: never;\n            dbs?: never;\n            tables?: never;\n            rows?: never;\n            ui?: UserInfo;\n            ocr?: never;\n        } | {\n            status?: never;\n            str?: never;\n            wxmsg?: never;\n            types?: never;\n            contacts?: never;\n            dbs?: never;\n            tables?: never;\n            rows?: never;\n            ui?: never;\n            ocr?: OcrMsg;\n        })))) {\n            super();\n            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"func\" in data && data.func != undefined) {\n                    this.func = data.func;\n                }\n                if (\"status\" in data && data.status != undefined) {\n                    this.status = data.status;\n                }\n                if (\"str\" in data && data.str != undefined) {\n                    this.str = data.str;\n                }\n                if (\"wxmsg\" in data && data.wxmsg != undefined) {\n                    this.wxmsg = data.wxmsg;\n                }\n                if (\"types\" in data && data.types != undefined) {\n                    this.types = data.types;\n                }\n                if (\"contacts\" in data && data.contacts != undefined) {\n                    this.contacts = data.contacts;\n                }\n                if (\"dbs\" in data && data.dbs != undefined) {\n                    this.dbs = data.dbs;\n                }\n                if (\"tables\" in data && data.tables != undefined) {\n                    this.tables = data.tables;\n                }\n                if (\"rows\" in data && data.rows != undefined) {\n                    this.rows = data.rows;\n                }\n                if (\"ui\" in data && data.ui != undefined) {\n                    this.ui = data.ui;\n                }\n                if (\"ocr\" in data && data.ocr != undefined) {\n                    this.ocr = data.ocr;\n                }\n            }\n        }\n        get func() {\n            return pb_1.Message.getFieldWithDefault(this, 1, Functions.FUNC_RESERVED) as Functions;\n        }\n        set func(value: Functions) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get status() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n        set status(value: number) {\n            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);\n        }\n        get has_status() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        get str() {\n            return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n        }\n        set str(value: string) {\n            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);\n        }\n        get has_str() {\n            return pb_1.Message.getField(this, 3) != null;\n        }\n        get wxmsg() {\n            return pb_1.Message.getWrapperField(this, WxMsg, 4) as WxMsg;\n        }\n        set wxmsg(value: WxMsg) {\n            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);\n        }\n        get has_wxmsg() {\n            return pb_1.Message.getField(this, 4) != null;\n        }\n        get types() {\n            return pb_1.Message.getWrapperField(this, MsgTypes, 5) as MsgTypes;\n        }\n        set types(value: MsgTypes) {\n            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);\n        }\n        get has_types() {\n            return pb_1.Message.getField(this, 5) != null;\n        }\n        get contacts() {\n            return pb_1.Message.getWrapperField(this, RpcContacts, 6) as RpcContacts;\n        }\n        set contacts(value: RpcContacts) {\n            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);\n        }\n        get has_contacts() {\n            return pb_1.Message.getField(this, 6) != null;\n        }\n        get dbs() {\n            return pb_1.Message.getWrapperField(this, DbNames, 7) as DbNames;\n        }\n        set dbs(value: DbNames) {\n            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);\n        }\n        get has_dbs() {\n            return pb_1.Message.getField(this, 7) != null;\n        }\n        get tables() {\n            return pb_1.Message.getWrapperField(this, DbTables, 8) as DbTables;\n        }\n        set tables(value: DbTables) {\n            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);\n        }\n        get has_tables() {\n            return pb_1.Message.getField(this, 8) != null;\n        }\n        get rows() {\n            return pb_1.Message.getWrapperField(this, DbRows, 9) as DbRows;\n        }\n        set rows(value: DbRows) {\n            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);\n        }\n        get has_rows() {\n            return pb_1.Message.getField(this, 9) != null;\n        }\n        get ui() {\n            return pb_1.Message.getWrapperField(this, UserInfo, 10) as UserInfo;\n        }\n        set ui(value: UserInfo) {\n            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);\n        }\n        get has_ui() {\n            return pb_1.Message.getField(this, 10) != null;\n        }\n        get ocr() {\n            return pb_1.Message.getWrapperField(this, OcrMsg, 11) as OcrMsg;\n        }\n        set ocr(value: OcrMsg) {\n            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);\n        }\n        get has_ocr() {\n            return pb_1.Message.getField(this, 11) != null;\n        }\n        get msg() {\n            const cases: {\n                [index: number]: \"none\" | \"status\" | \"str\" | \"wxmsg\" | \"types\" | \"contacts\" | \"dbs\" | \"tables\" | \"rows\" | \"ui\" | \"ocr\";\n            } = {\n                0: \"none\",\n                2: \"status\",\n                3: \"str\",\n                4: \"wxmsg\",\n                5: \"types\",\n                6: \"contacts\",\n                7: \"dbs\",\n                8: \"tables\",\n                9: \"rows\",\n                10: \"ui\",\n                11: \"ocr\"\n            };\n            return cases[pb_1.Message.computeOneofCase(this, [2, 3, 4, 5, 6, 7, 8, 9, 10, 11])];\n        }\n        static fromObject(data: {\n            func?: Functions;\n            status?: number;\n            str?: string;\n            wxmsg?: ReturnType<typeof WxMsg.prototype.toObject>;\n            types?: ReturnType<typeof MsgTypes.prototype.toObject>;\n            contacts?: ReturnType<typeof RpcContacts.prototype.toObject>;\n            dbs?: ReturnType<typeof DbNames.prototype.toObject>;\n            tables?: ReturnType<typeof DbTables.prototype.toObject>;\n            rows?: ReturnType<typeof DbRows.prototype.toObject>;\n            ui?: ReturnType<typeof UserInfo.prototype.toObject>;\n            ocr?: ReturnType<typeof OcrMsg.prototype.toObject>;\n        }): Response {\n            const message = new Response({});\n            if (data.func != null) {\n                message.func = data.func;\n            }\n            if (data.status != null) {\n                message.status = data.status;\n            }\n            if (data.str != null) {\n                message.str = data.str;\n            }\n            if (data.wxmsg != null) {\n                message.wxmsg = WxMsg.fromObject(data.wxmsg);\n            }\n            if (data.types != null) {\n                message.types = MsgTypes.fromObject(data.types);\n            }\n            if (data.contacts != null) {\n                message.contacts = RpcContacts.fromObject(data.contacts);\n            }\n            if (data.dbs != null) {\n                message.dbs = DbNames.fromObject(data.dbs);\n            }\n            if (data.tables != null) {\n                message.tables = DbTables.fromObject(data.tables);\n            }\n            if (data.rows != null) {\n                message.rows = DbRows.fromObject(data.rows);\n            }\n            if (data.ui != null) {\n                message.ui = UserInfo.fromObject(data.ui);\n            }\n            if (data.ocr != null) {\n                message.ocr = OcrMsg.fromObject(data.ocr);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                func?: Functions;\n                status?: number;\n                str?: string;\n                wxmsg?: ReturnType<typeof WxMsg.prototype.toObject>;\n                types?: ReturnType<typeof MsgTypes.prototype.toObject>;\n                contacts?: ReturnType<typeof RpcContacts.prototype.toObject>;\n                dbs?: ReturnType<typeof DbNames.prototype.toObject>;\n                tables?: ReturnType<typeof DbTables.prototype.toObject>;\n                rows?: ReturnType<typeof DbRows.prototype.toObject>;\n                ui?: ReturnType<typeof UserInfo.prototype.toObject>;\n                ocr?: ReturnType<typeof OcrMsg.prototype.toObject>;\n            } = {};\n            if (this.func != null) {\n                data.func = this.func;\n            }\n            if (this.status != null) {\n                data.status = this.status;\n            }\n            if (this.str != null) {\n                data.str = this.str;\n            }\n            if (this.wxmsg != null) {\n                data.wxmsg = this.wxmsg.toObject();\n            }\n            if (this.types != null) {\n                data.types = this.types.toObject();\n            }\n            if (this.contacts != null) {\n                data.contacts = this.contacts.toObject();\n            }\n            if (this.dbs != null) {\n                data.dbs = this.dbs.toObject();\n            }\n            if (this.tables != null) {\n                data.tables = this.tables.toObject();\n            }\n            if (this.rows != null) {\n                data.rows = this.rows.toObject();\n            }\n            if (this.ui != null) {\n                data.ui = this.ui.toObject();\n            }\n            if (this.ocr != null) {\n                data.ocr = this.ocr.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.func != Functions.FUNC_RESERVED)\n                writer.writeEnum(1, this.func);\n            if (this.has_status)\n                writer.writeInt32(2, this.status);\n            if (this.has_str)\n                writer.writeString(3, this.str);\n            if (this.has_wxmsg)\n                writer.writeMessage(4, this.wxmsg, () => this.wxmsg.serialize(writer));\n            if (this.has_types)\n                writer.writeMessage(5, this.types, () => this.types.serialize(writer));\n            if (this.has_contacts)\n                writer.writeMessage(6, this.contacts, () => this.contacts.serialize(writer));\n            if (this.has_dbs)\n                writer.writeMessage(7, this.dbs, () => this.dbs.serialize(writer));\n            if (this.has_tables)\n                writer.writeMessage(8, this.tables, () => this.tables.serialize(writer));\n            if (this.has_rows)\n                writer.writeMessage(9, this.rows, () => this.rows.serialize(writer));\n            if (this.has_ui)\n                writer.writeMessage(10, this.ui, () => this.ui.serialize(writer));\n            if (this.has_ocr)\n                writer.writeMessage(11, this.ocr, () => this.ocr.serialize(writer));\n            if (!w)\n                return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Response {\n            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Response();\n            while (reader.nextField()) {\n                if (reader.isEndGroup())\n                    break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.func = reader.readEnum();\n                        break;\n                    case 2:\n                        message.status = reader.readInt32();\n                        break;\n                    case 3:\n                        message.str = reader.readString();\n                        break;\n                    case 4:\n                        reader.readMessage(message.wxmsg, () => message.wxmsg = WxMsg.deserialize(reader));\n                        break;\n                    case 5:\n                        reader.readMessage(message.types, () => message.types = MsgTypes.deserialize(reader));\n                        break;\n                    case 6:\n                        reader.readMessage(message.contacts, () => message.contacts = RpcContacts.deserialize(reader));\n                        break;\n                    case 7:\n                        reader.readMessage(message.dbs, () => message.dbs = DbNames.deserialize(reader));\n                        break;\n                    case 8:\n                        reader.readMessage(message.tables, () => message.tables = DbTables.deserialize(reader));\n                        break;\n                    case 9:\n                        reader.readMessage(message.rows, () => message.rows = DbRows.deserialize(reader));\n                        break;\n                    case 10:\n                        reader.readMessage(message.ui, () => message.ui = UserInfo.deserialize(reader));\n                        break;\n                    case 11:\n                        reader.readMessage(message.ocr, () => message.ocr = OcrMsg.deserialize(reader));\n                        break;\n                    default: reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): Response {\n            return Response.deserialize(bytes);\n        }\n    }\n    export class Empty extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(data?: any[] | {}) {\n            super();\n            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n            if (!Array.isArray(data) && typeof data == \"object\") { }\n        }\n        static fromObject(data: {}): Empty {\n            const message = new Empty({});\n            return message;\n        }\n        toObject() {\n            const data: {} = {};\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (!w)\n                return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Empty {\n            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Empty();\n            while (reader.nextField()) {\n                if (reader.isEndGroup())\n                    break;\n                switch (reader.getFieldNumber()) {\n                    default: reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): Empty {\n            return Empty.deserialize(bytes);\n        }\n    }\n    export class WxMsg extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(data?: any[] | {\n            is_self?: boolean;\n            is_group?: boolean;\n            id?: string;\n            type?: number;\n            ts?: number;\n            roomid?: string;\n            content?: string;\n            sender?: string;\n            sign?: string;\n            thumb?: string;\n            extra?: string;\n            xml?: string;\n        }) {\n            super();\n            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"is_self\" in data && data.is_self != undefined) {\n                    this.is_self = data.is_self;\n                }\n                if (\"is_group\" in data && data.is_group != undefined) {\n                    this.is_group = data.is_group;\n                }\n                if (\"id\" in data && data.id != undefined) {\n                    this.id = data.id;\n                }\n                if (\"type\" in data && data.type != undefined) {\n                    this.type = data.type;\n                }\n                if (\"ts\" in data && data.ts != undefined) {\n                    this.ts = data.ts;\n                }\n                if (\"roomid\" in data && data.roomid != undefined) {\n                    this.roomid = data.roomid;\n                }\n                if (\"content\" in data && data.content != undefined) {\n                    this.content = data.content;\n                }\n                if (\"sender\" in data && data.sender != undefined) {\n                    this.sender = data.sender;\n                }\n                if (\"sign\" in data && data.sign != undefined) {\n                    this.sign = data.sign;\n                }\n                if (\"thumb\" in data && data.thumb != undefined) {\n                    this.thumb = data.thumb;\n                }\n                if (\"extra\" in data && data.extra != undefined) {\n                    this.extra = data.extra;\n                }\n                if (\"xml\" in data && data.xml != undefined) {\n                    this.xml = data.xml;\n                }\n            }\n        }\n        get is_self() {\n            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;\n        }\n        set is_self(value: boolean) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get is_group() {\n            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;\n        }\n        set is_group(value: boolean) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get id() {\n            return pb_1.Message.getFieldWithDefault(this, 3, \"0\") as string;\n        }\n        set id(value: string) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        get type() {\n            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;\n        }\n        set type(value: number) {\n            pb_1.Message.setField(this, 4, value);\n        }\n        get ts() {\n            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;\n        }\n        set ts(value: number) {\n            pb_1.Message.setField(this, 5, value);\n        }\n        get roomid() {\n            return pb_1.Message.getFieldWithDefault(this, 6, \"\") as string;\n        }\n        set roomid(value: string) {\n            pb_1.Message.setField(this, 6, value);\n        }\n        get content() {\n            return pb_1.Message.getFieldWithDefault(this, 7, \"\") as string;\n        }\n        set content(value: string) {\n            pb_1.Message.setField(this, 7, value);\n        }\n        get sender() {\n            return pb_1.Message.getFieldWithDefault(this, 8, \"\") as string;\n        }\n        set sender(value: string) {\n            pb_1.Message.setField(this, 8, value);\n        }\n        get sign() {\n            return pb_1.Message.getFieldWithDefault(this, 9, \"\") as string;\n        }\n        set sign(value: string) {\n            pb_1.Message.setField(this, 9, value);\n        }\n        get thumb() {\n            return pb_1.Message.getFieldWithDefault(this, 10, \"\") as string;\n        }\n        set thumb(value: string) {\n            pb_1.Message.setField(this, 10, value);\n        }\n        get extra() {\n            return pb_1.Message.getFieldWithDefault(this, 11, \"\") as string;\n        }\n        set extra(value: string) {\n            pb_1.Message.setField(this, 11, value);\n        }\n        get xml() {\n            return pb_1.Message.getFieldWithDefault(this, 12, \"\") as string;\n        }\n        set xml(value: string) {\n            pb_1.Message.setField(this, 12, value);\n        }\n        static fromObject(data: {\n            is_self?: boolean;\n            is_group?: boolean;\n            id?: string;\n            type?: number;\n            ts?: number;\n            roomid?: string;\n            content?: string;\n            sender?: string;\n            sign?: string;\n            thumb?: string;\n            extra?: string;\n            xml?: string;\n        }): WxMsg {\n            const message = new WxMsg({});\n            if (data.is_self != null) {\n                message.is_self = data.is_self;\n            }\n            if (data.is_group != null) {\n                message.is_group = data.is_group;\n            }\n            if (data.id != null) {\n                message.id = data.id;\n            }\n            if (data.type != null) {\n                message.type = data.type;\n            }\n            if (data.ts != null) {\n                message.ts = data.ts;\n            }\n            if (data.roomid != null) {\n                message.roomid = data.roomid;\n            }\n            if (data.content != null) {\n                message.content = data.content;\n            }\n            if (data.sender != null) {\n                message.sender = data.sender;\n            }\n            if (data.sign != null) {\n                message.sign = data.sign;\n            }\n            if (data.thumb != null) {\n                message.thumb = data.thumb;\n            }\n            if (data.extra != null) {\n                message.extra = data.extra;\n            }\n            if (data.xml != null) {\n                message.xml = data.xml;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                is_self?: boolean;\n                is_group?: boolean;\n                id?: string;\n                type?: number;\n                ts?: number;\n                roomid?: string;\n                content?: string;\n                sender?: string;\n                sign?: string;\n                thumb?: string;\n                extra?: string;\n                xml?: string;\n            } = {};\n            if (this.is_self != null) {\n                data.is_self = this.is_self;\n            }\n            if (this.is_group != null) {\n                data.is_group = this.is_group;\n            }\n            if (this.id != null) {\n                data.id = this.id;\n            }\n            if (this.type != null) {\n                data.type = this.type;\n            }\n            if (this.ts != null) {\n                data.ts = this.ts;\n            }\n            if (this.roomid != null) {\n                data.roomid = this.roomid;\n            }\n            if (this.content != null) {\n                data.content = this.content;\n            }\n            if (this.sender != null) {\n                data.sender = this.sender;\n            }\n            if (this.sign != null) {\n                data.sign = this.sign;\n            }\n            if (this.thumb != null) {\n                data.thumb = this.thumb;\n            }\n            if (this.extra != null) {\n                data.extra = this.extra;\n            }\n            if (this.xml != null) {\n                data.xml = this.xml;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.is_self != false)\n                writer.writeBool(1, this.is_self);\n            if (this.is_group != false)\n                writer.writeBool(2, this.is_group);\n            if (this.id != \"0\")\n                writer.writeUint64String(3, this.id);\n            if (this.type != 0)\n                writer.writeUint32(4, this.type);\n            if (this.ts != 0)\n                writer.writeUint32(5, this.ts);\n            if (this.roomid.length)\n                writer.writeString(6, this.roomid);\n            if (this.content.length)\n                writer.writeString(7, this.content);\n            if (this.sender.length)\n                writer.writeString(8, this.sender);\n            if (this.sign.length)\n                writer.writeString(9, this.sign);\n            if (this.thumb.length)\n                writer.writeString(10, this.thumb);\n            if (this.extra.length)\n                writer.writeString(11, this.extra);\n            if (this.xml.length)\n                writer.writeString(12, this.xml);\n            if (!w)\n                return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WxMsg {\n            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WxMsg();\n            while (reader.nextField()) {\n                if (reader.isEndGroup())\n                    break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.is_self = reader.readBool();\n                        break;\n                    case 2:\n                        message.is_group = reader.readBool();\n                        break;\n                    case 3:\n                        message.id = reader.readUint64String();\n                        break;\n                    case 4:\n                        message.type = reader.readUint32();\n                        break;\n                    case 5:\n                        message.ts = reader.readUint32();\n                        break;\n                    case 6:\n                        message.roomid = reader.readString();\n                        break;\n                    case 7:\n                        message.content = reader.readString();\n                        break;\n                    case 8:\n                        message.sender = reader.readString();\n                        break;\n                    case 9:\n                        message.sign = reader.readString();\n                        break;\n                    case 10:\n                        message.thumb = reader.readString();\n                        break;\n                    case 11:\n                        message.extra = reader.readString();\n                        break;\n                    case 12:\n                        message.xml = reader.readString();\n                        break;\n                    default: reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): WxMsg {\n            return WxMsg.deserialize(bytes);\n        }\n    }\n    export class TextMsg extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(data?: any[] | {\n            msg?: string;\n            receiver?: string;\n            aters?: string;\n        }) {\n            super();\n            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"msg\" in data && data.msg != undefined) {\n                    this.msg = data.msg;\n                }\n                if (\"receiver\" in data && data.receiver != undefined) {\n                    this.receiver = data.receiver;\n                }\n                if (\"aters\" in data && data.aters != undefined) {\n                    this.aters = data.aters;\n                }\n            }\n        }\n        get msg() {\n            return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n        }\n        set msg(value: string) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get receiver() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set receiver(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get aters() {\n            return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n        }\n        set aters(value: string) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        static fromObject(data: {\n            msg?: string;\n            receiver?: string;\n            aters?: string;\n        }): TextMsg {\n            const message = new TextMsg({});\n            if (data.msg != null) {\n                message.msg = data.msg;\n            }\n            if (data.receiver != null) {\n                message.receiver = data.receiver;\n            }\n            if (data.aters != null) {\n                message.aters = data.aters;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                msg?: string;\n                receiver?: string;\n                aters?: string;\n            } = {};\n            if (this.msg != null) {\n                data.msg = this.msg;\n            }\n            if (this.receiver != null) {\n                data.receiver = this.receiver;\n            }\n            if (this.aters != null) {\n                data.aters = this.aters;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.msg.length)\n                writer.writeString(1, this.msg);\n            if (this.receiver.length)\n                writer.writeString(2, this.receiver);\n            if (this.aters.length)\n                writer.writeString(3, this.aters);\n            if (!w)\n                return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TextMsg {\n            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TextMsg();\n            while (reader.nextField()) {\n                if (reader.isEndGroup())\n                    break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.msg = reader.readString();\n                        break;\n                    case 2:\n                        message.receiver = reader.readString();\n                        break;\n                    case 3:\n                        message.aters = reader.readString();\n                        break;\n                    default: reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): TextMsg {\n            return TextMsg.deserialize(bytes);\n        }\n    }\n    export class PathMsg extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(data?: any[] | {\n            path?: string;\n            receiver?: string;\n        }) {\n            super();\n            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"path\" in data && data.path != undefined) {\n                    this.path = data.path;\n                }\n                if (\"receiver\" in data && data.receiver != undefined) {\n                    this.receiver = data.receiver;\n                }\n            }\n        }\n        get path() {\n            return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n        }\n        set path(value: string) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get receiver() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set receiver(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: {\n            path?: string;\n            receiver?: string;\n        }): PathMsg {\n            const message = new PathMsg({});\n            if (data.path != null) {\n                message.path = data.path;\n            }\n            if (data.receiver != null) {\n                message.receiver = data.receiver;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                path?: string;\n                receiver?: string;\n            } = {};\n            if (this.path != null) {\n                data.path = this.path;\n            }\n            if (this.receiver != null) {\n                data.receiver = this.receiver;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.path.length)\n                writer.writeString(1, this.path);\n            if (this.receiver.length)\n                writer.writeString(2, this.receiver);\n            if (!w)\n                return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PathMsg {\n            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PathMsg();\n            while (reader.nextField()) {\n                if (reader.isEndGroup())\n                    break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.path = reader.readString();\n                        break;\n                    case 2:\n                        message.receiver = reader.readString();\n                        break;\n                    default: reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PathMsg {\n            return PathMsg.deserialize(bytes);\n        }\n    }\n    export class XmlMsg extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(data?: any[] | {\n            receiver?: string;\n            content?: string;\n            path?: string;\n            type?: number;\n        }) {\n            super();\n            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"receiver\" in data && data.receiver != undefined) {\n                    this.receiver = data.receiver;\n                }\n                if (\"content\" in data && data.content != undefined) {\n                    this.content = data.content;\n                }\n                if (\"path\" in data && data.path != undefined) {\n                    this.path = data.path;\n                }\n                if (\"type\" in data && data.type != undefined) {\n                    this.type = data.type;\n                }\n            }\n        }\n        get receiver() {\n            return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n        }\n        set receiver(value: string) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get content() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set content(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get path() {\n            return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n        }\n        set path(value: string) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        get type() {\n            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;\n        }\n        set type(value: number) {\n            pb_1.Message.setField(this, 4, value);\n        }\n        static fromObject(data: {\n            receiver?: string;\n            content?: string;\n            path?: string;\n            type?: number;\n        }): XmlMsg {\n            const message = new XmlMsg({});\n            if (data.receiver != null) {\n                message.receiver = data.receiver;\n            }\n            if (data.content != null) {\n                message.content = data.content;\n            }\n            if (data.path != null) {\n                message.path = data.path;\n            }\n            if (data.type != null) {\n                message.type = data.type;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                receiver?: string;\n                content?: string;\n                path?: string;\n                type?: number;\n            } = {};\n            if (this.receiver != null) {\n                data.receiver = this.receiver;\n            }\n            if (this.content != null) {\n                data.content = this.content;\n            }\n            if (this.path != null) {\n                data.path = this.path;\n            }\n            if (this.type != null) {\n                data.type = this.type;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.receiver.length)\n                writer.writeString(1, this.receiver);\n            if (this.content.length)\n                writer.writeString(2, this.content);\n            if (this.path.length)\n                writer.writeString(3, this.path);\n            if (this.type != 0)\n                writer.writeInt32(4, this.type);\n            if (!w)\n                return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): XmlMsg {\n            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new XmlMsg();\n            while (reader.nextField()) {\n                if (reader.isEndGroup())\n                    break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.receiver = reader.readString();\n                        break;\n                    case 2:\n                        message.content = reader.readString();\n                        break;\n                    case 3:\n                        message.path = reader.readString();\n                        break;\n                    case 4:\n                        message.type = reader.readInt32();\n                        break;\n                    default: reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): XmlMsg {\n            return XmlMsg.deserialize(bytes);\n        }\n    }\n    export class MsgTypes extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(data?: any[] | {\n            types?: Map<number, string>;\n        }) {\n            super();\n            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"types\" in data && data.types != undefined) {\n                    this.types = data.types;\n                }\n            }\n            if (!this.types)\n                this.types = new Map();\n        }\n        get types() {\n            return pb_1.Message.getField(this, 1) as any as Map<number, string>;\n        }\n        set types(value: Map<number, string>) {\n            pb_1.Message.setField(this, 1, value as any);\n        }\n        static fromObject(data: {\n            types?: {\n                [key: number]: string;\n            };\n        }): MsgTypes {\n            const message = new MsgTypes({});\n            if (typeof data.types == \"object\") {\n                message.types = new Map(Object.entries(data.types).map(([key, value]) => [Number(key), value]));\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                types?: {\n                    [key: number]: string;\n                };\n            } = {};\n            if (this.types != null) {\n                data.types = (Object.fromEntries)(this.types);\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            for (const [key, value] of this.types) {\n                writer.writeMessage(1, this.types, () => {\n                    writer.writeInt32(1, key);\n                    writer.writeString(2, value);\n                });\n            }\n            if (!w)\n                return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgTypes {\n            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgTypes();\n            while (reader.nextField()) {\n                if (reader.isEndGroup())\n                    break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.types as any, reader, reader.readInt32, reader.readString));\n                        break;\n                    default: reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): MsgTypes {\n            return MsgTypes.deserialize(bytes);\n        }\n    }\n    export class RpcContact extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(data?: any[] | {\n            wxid?: string;\n            code?: string;\n            remark?: string;\n            name?: string;\n            country?: string;\n            province?: string;\n            city?: string;\n            gender?: number;\n        }) {\n            super();\n            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"wxid\" in data && data.wxid != undefined) {\n                    this.wxid = data.wxid;\n                }\n                if (\"code\" in data && data.code != undefined) {\n                    this.code = data.code;\n                }\n                if (\"remark\" in data && data.remark != undefined) {\n                    this.remark = data.remark;\n                }\n                if (\"name\" in data && data.name != undefined) {\n                    this.name = data.name;\n                }\n                if (\"country\" in data && data.country != undefined) {\n                    this.country = data.country;\n                }\n                if (\"province\" in data && data.province != undefined) {\n                    this.province = data.province;\n                }\n                if (\"city\" in data && data.city != undefined) {\n                    this.city = data.city;\n                }\n                if (\"gender\" in data && data.gender != undefined) {\n                    this.gender = data.gender;\n                }\n            }\n        }\n        get wxid() {\n            return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n        }\n        set wxid(value: string) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get code() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set code(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get remark() {\n            return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n        }\n        set remark(value: string) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        get name() {\n            return pb_1.Message.getFieldWithDefault(this, 4, \"\") as string;\n        }\n        set name(value: string) {\n            pb_1.Message.setField(this, 4, value);\n        }\n        get country() {\n            return pb_1.Message.getFieldWithDefault(this, 5, \"\") as string;\n        }\n        set country(value: string) {\n            pb_1.Message.setField(this, 5, value);\n        }\n        get province() {\n            return pb_1.Message.getFieldWithDefault(this, 6, \"\") as string;\n        }\n        set province(value: string) {\n            pb_1.Message.setField(this, 6, value);\n        }\n        get city() {\n            return pb_1.Message.getFieldWithDefault(this, 7, \"\") as string;\n        }\n        set city(value: string) {\n            pb_1.Message.setField(this, 7, value);\n        }\n        get gender() {\n            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;\n        }\n        set gender(value: number) {\n            pb_1.Message.setField(this, 8, value);\n        }\n        static fromObject(data: {\n            wxid?: string;\n            code?: string;\n            remark?: string;\n            name?: string;\n            country?: string;\n            province?: string;\n            city?: string;\n            gender?: number;\n        }): RpcContact {\n            const message = new RpcContact({});\n            if (data.wxid != null) {\n                message.wxid = data.wxid;\n            }\n            if (data.code != null) {\n                message.code = data.code;\n            }\n            if (data.remark != null) {\n                message.remark = data.remark;\n            }\n            if (data.name != null) {\n                message.name = data.name;\n            }\n            if (data.country != null) {\n                message.country = data.country;\n            }\n            if (data.province != null) {\n                message.province = data.province;\n            }\n            if (data.city != null) {\n                message.city = data.city;\n            }\n            if (data.gender != null) {\n                message.gender = data.gender;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                wxid?: string;\n                code?: string;\n                remark?: string;\n                name?: string;\n                country?: string;\n                province?: string;\n                city?: string;\n                gender?: number;\n            } = {};\n            if (this.wxid != null) {\n                data.wxid = this.wxid;\n            }\n            if (this.code != null) {\n                data.code = this.code;\n            }\n            if (this.remark != null) {\n                data.remark = this.remark;\n            }\n            if (this.name != null) {\n                data.name = this.name;\n            }\n            if (this.country != null) {\n                data.country = this.country;\n            }\n            if (this.province != null) {\n                data.province = this.province;\n            }\n            if (this.city != null) {\n                data.city = this.city;\n            }\n            if (this.gender != null) {\n                data.gender = this.gender;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.wxid.length)\n                writer.writeString(1, this.wxid);\n            if (this.code.length)\n                writer.writeString(2, this.code);\n            if (this.remark.length)\n                writer.writeString(3, this.remark);\n            if (this.name.length)\n                writer.writeString(4, this.name);\n            if (this.country.length)\n                writer.writeString(5, this.country);\n            if (this.province.length)\n                writer.writeString(6, this.province);\n            if (this.city.length)\n                writer.writeString(7, this.city);\n            if (this.gender != 0)\n                writer.writeInt32(8, this.gender);\n            if (!w)\n                return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RpcContact {\n            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RpcContact();\n            while (reader.nextField()) {\n                if (reader.isEndGroup())\n                    break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.wxid = reader.readString();\n                        break;\n                    case 2:\n                        message.code = reader.readString();\n                        break;\n                    case 3:\n                        message.remark = reader.readString();\n                        break;\n                    case 4:\n                        message.name = reader.readString();\n                        break;\n                    case 5:\n                        message.country = reader.readString();\n                        break;\n                    case 6:\n                        message.province = reader.readString();\n                        break;\n                    case 7:\n                        message.city = reader.readString();\n                        break;\n                    case 8:\n                        message.gender = reader.readInt32();\n                        break;\n                    default: reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): RpcContact {\n            return RpcContact.deserialize(bytes);\n        }\n    }\n    export class RpcContacts extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(data?: any[] | {\n            contacts?: RpcContact[];\n        }) {\n            super();\n            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"contacts\" in data && data.contacts != undefined) {\n                    this.contacts = data.contacts;\n                }\n            }\n        }\n        get contacts() {\n            return pb_1.Message.getRepeatedWrapperField(this, RpcContact, 1) as RpcContact[];\n        }\n        set contacts(value: RpcContact[]) {\n            pb_1.Message.setRepeatedWrapperField(this, 1, value);\n        }\n        static fromObject(data: {\n            contacts?: ReturnType<typeof RpcContact.prototype.toObject>[];\n        }): RpcContacts {\n            const message = new RpcContacts({});\n            if (data.contacts != null) {\n                message.contacts = data.contacts.map(item => RpcContact.fromObject(item));\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                contacts?: ReturnType<typeof RpcContact.prototype.toObject>[];\n            } = {};\n            if (this.contacts != null) {\n                data.contacts = this.contacts.map((item: RpcContact) => item.toObject());\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.contacts.length)\n                writer.writeRepeatedMessage(1, this.contacts, (item: RpcContact) => item.serialize(writer));\n            if (!w)\n                return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RpcContacts {\n            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RpcContacts();\n            while (reader.nextField()) {\n                if (reader.isEndGroup())\n                    break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(message.contacts, () => pb_1.Message.addToRepeatedWrapperField(message, 1, RpcContact.deserialize(reader), RpcContact));\n                        break;\n                    default: reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): RpcContacts {\n            return RpcContacts.deserialize(bytes);\n        }\n    }\n    export class DbNames extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(data?: any[] | {\n            names?: string[];\n        }) {\n            super();\n            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"names\" in data && data.names != undefined) {\n                    this.names = data.names;\n                }\n            }\n        }\n        get names() {\n            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];\n        }\n        set names(value: string[]) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        static fromObject(data: {\n            names?: string[];\n        }): DbNames {\n            const message = new DbNames({});\n            if (data.names != null) {\n                message.names = data.names;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                names?: string[];\n            } = {};\n            if (this.names != null) {\n                data.names = this.names;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.names.length)\n                writer.writeRepeatedString(1, this.names);\n            if (!w)\n                return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DbNames {\n            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DbNames();\n            while (reader.nextField()) {\n                if (reader.isEndGroup())\n                    break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());\n                        break;\n                    default: reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): DbNames {\n            return DbNames.deserialize(bytes);\n        }\n    }\n    export class DbTable extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(data?: any[] | {\n            name?: string;\n            sql?: string;\n        }) {\n            super();\n            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"name\" in data && data.name != undefined) {\n                    this.name = data.name;\n                }\n                if (\"sql\" in data && data.sql != undefined) {\n                    this.sql = data.sql;\n                }\n            }\n        }\n        get name() {\n            return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n        }\n        set name(value: string) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get sql() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set sql(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: {\n            name?: string;\n            sql?: string;\n        }): DbTable {\n            const message = new DbTable({});\n            if (data.name != null) {\n                message.name = data.name;\n            }\n            if (data.sql != null) {\n                message.sql = data.sql;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                name?: string;\n                sql?: string;\n            } = {};\n            if (this.name != null) {\n                data.name = this.name;\n            }\n            if (this.sql != null) {\n                data.sql = this.sql;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.name.length)\n                writer.writeString(1, this.name);\n            if (this.sql.length)\n                writer.writeString(2, this.sql);\n            if (!w)\n                return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DbTable {\n            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DbTable();\n            while (reader.nextField()) {\n                if (reader.isEndGroup())\n                    break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.name = reader.readString();\n                        break;\n                    case 2:\n                        message.sql = reader.readString();\n                        break;\n                    default: reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): DbTable {\n            return DbTable.deserialize(bytes);\n        }\n    }\n    export class DbTables extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(data?: any[] | {\n            tables?: DbTable[];\n        }) {\n            super();\n            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"tables\" in data && data.tables != undefined) {\n                    this.tables = data.tables;\n                }\n            }\n        }\n        get tables() {\n            return pb_1.Message.getRepeatedWrapperField(this, DbTable, 1) as DbTable[];\n        }\n        set tables(value: DbTable[]) {\n            pb_1.Message.setRepeatedWrapperField(this, 1, value);\n        }\n        static fromObject(data: {\n            tables?: ReturnType<typeof DbTable.prototype.toObject>[];\n        }): DbTables {\n            const message = new DbTables({});\n            if (data.tables != null) {\n                message.tables = data.tables.map(item => DbTable.fromObject(item));\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                tables?: ReturnType<typeof DbTable.prototype.toObject>[];\n            } = {};\n            if (this.tables != null) {\n                data.tables = this.tables.map((item: DbTable) => item.toObject());\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.tables.length)\n                writer.writeRepeatedMessage(1, this.tables, (item: DbTable) => item.serialize(writer));\n            if (!w)\n                return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DbTables {\n            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DbTables();\n            while (reader.nextField()) {\n                if (reader.isEndGroup())\n                    break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(message.tables, () => pb_1.Message.addToRepeatedWrapperField(message, 1, DbTable.deserialize(reader), DbTable));\n                        break;\n                    default: reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): DbTables {\n            return DbTables.deserialize(bytes);\n        }\n    }\n    export class DbQuery extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(data?: any[] | {\n            db?: string;\n            sql?: string;\n        }) {\n            super();\n            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"db\" in data && data.db != undefined) {\n                    this.db = data.db;\n                }\n                if (\"sql\" in data && data.sql != undefined) {\n                    this.sql = data.sql;\n                }\n            }\n        }\n        get db() {\n            return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n        }\n        set db(value: string) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get sql() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set sql(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: {\n            db?: string;\n            sql?: string;\n        }): DbQuery {\n            const message = new DbQuery({});\n            if (data.db != null) {\n                message.db = data.db;\n            }\n            if (data.sql != null) {\n                message.sql = data.sql;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                db?: string;\n                sql?: string;\n            } = {};\n            if (this.db != null) {\n                data.db = this.db;\n            }\n            if (this.sql != null) {\n                data.sql = this.sql;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.db.length)\n                writer.writeString(1, this.db);\n            if (this.sql.length)\n                writer.writeString(2, this.sql);\n            if (!w)\n                return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DbQuery {\n            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DbQuery();\n            while (reader.nextField()) {\n                if (reader.isEndGroup())\n                    break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.db = reader.readString();\n                        break;\n                    case 2:\n                        message.sql = reader.readString();\n                        break;\n                    default: reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): DbQuery {\n            return DbQuery.deserialize(bytes);\n        }\n    }\n    export class DbField extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(data?: any[] | {\n            type?: number;\n            column?: string;\n            content?: Uint8Array;\n        }) {\n            super();\n            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"type\" in data && data.type != undefined) {\n                    this.type = data.type;\n                }\n                if (\"column\" in data && data.column != undefined) {\n                    this.column = data.column;\n                }\n                if (\"content\" in data && data.content != undefined) {\n                    this.content = data.content;\n                }\n            }\n        }\n        get type() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set type(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get column() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set column(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get content() {\n            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;\n        }\n        set content(value: Uint8Array) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        static fromObject(data: {\n            type?: number;\n            column?: string;\n            content?: Uint8Array;\n        }): DbField {\n            const message = new DbField({});\n            if (data.type != null) {\n                message.type = data.type;\n            }\n            if (data.column != null) {\n                message.column = data.column;\n            }\n            if (data.content != null) {\n                message.content = data.content;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                type?: number;\n                column?: string;\n                content?: Uint8Array;\n            } = {};\n            if (this.type != null) {\n                data.type = this.type;\n            }\n            if (this.column != null) {\n                data.column = this.column;\n            }\n            if (this.content != null) {\n                data.content = this.content;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.type != 0)\n                writer.writeInt32(1, this.type);\n            if (this.column.length)\n                writer.writeString(2, this.column);\n            if (this.content.length)\n                writer.writeBytes(3, this.content);\n            if (!w)\n                return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DbField {\n            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DbField();\n            while (reader.nextField()) {\n                if (reader.isEndGroup())\n                    break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.type = reader.readInt32();\n                        break;\n                    case 2:\n                        message.column = reader.readString();\n                        break;\n                    case 3:\n                        message.content = reader.readBytes();\n                        break;\n                    default: reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): DbField {\n            return DbField.deserialize(bytes);\n        }\n    }\n    export class DbRow extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(data?: any[] | {\n            fields?: DbField[];\n        }) {\n            super();\n            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"fields\" in data && data.fields != undefined) {\n                    this.fields = data.fields;\n                }\n            }\n        }\n        get fields() {\n            return pb_1.Message.getRepeatedWrapperField(this, DbField, 1) as DbField[];\n        }\n        set fields(value: DbField[]) {\n            pb_1.Message.setRepeatedWrapperField(this, 1, value);\n        }\n        static fromObject(data: {\n            fields?: ReturnType<typeof DbField.prototype.toObject>[];\n        }): DbRow {\n            const message = new DbRow({});\n            if (data.fields != null) {\n                message.fields = data.fields.map(item => DbField.fromObject(item));\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                fields?: ReturnType<typeof DbField.prototype.toObject>[];\n            } = {};\n            if (this.fields != null) {\n                data.fields = this.fields.map((item: DbField) => item.toObject());\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.fields.length)\n                writer.writeRepeatedMessage(1, this.fields, (item: DbField) => item.serialize(writer));\n            if (!w)\n                return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DbRow {\n            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DbRow();\n            while (reader.nextField()) {\n                if (reader.isEndGroup())\n                    break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(message.fields, () => pb_1.Message.addToRepeatedWrapperField(message, 1, DbField.deserialize(reader), DbField));\n                        break;\n                    default: reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): DbRow {\n            return DbRow.deserialize(bytes);\n        }\n    }\n    export class DbRows extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(data?: any[] | {\n            rows?: DbRow[];\n        }) {\n            super();\n            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"rows\" in data && data.rows != undefined) {\n                    this.rows = data.rows;\n                }\n            }\n        }\n        get rows() {\n            return pb_1.Message.getRepeatedWrapperField(this, DbRow, 1) as DbRow[];\n        }\n        set rows(value: DbRow[]) {\n            pb_1.Message.setRepeatedWrapperField(this, 1, value);\n        }\n        static fromObject(data: {\n            rows?: ReturnType<typeof DbRow.prototype.toObject>[];\n        }): DbRows {\n            const message = new DbRows({});\n            if (data.rows != null) {\n                message.rows = data.rows.map(item => DbRow.fromObject(item));\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                rows?: ReturnType<typeof DbRow.prototype.toObject>[];\n            } = {};\n            if (this.rows != null) {\n                data.rows = this.rows.map((item: DbRow) => item.toObject());\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.rows.length)\n                writer.writeRepeatedMessage(1, this.rows, (item: DbRow) => item.serialize(writer));\n            if (!w)\n                return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DbRows {\n            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DbRows();\n            while (reader.nextField()) {\n                if (reader.isEndGroup())\n                    break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(message.rows, () => pb_1.Message.addToRepeatedWrapperField(message, 1, DbRow.deserialize(reader), DbRow));\n                        break;\n                    default: reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): DbRows {\n            return DbRows.deserialize(bytes);\n        }\n    }\n    export class Verification extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(data?: any[] | {\n            v3?: string;\n            v4?: string;\n            scene?: number;\n        }) {\n            super();\n            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"v3\" in data && data.v3 != undefined) {\n                    this.v3 = data.v3;\n                }\n                if (\"v4\" in data && data.v4 != undefined) {\n                    this.v4 = data.v4;\n                }\n                if (\"scene\" in data && data.scene != undefined) {\n                    this.scene = data.scene;\n                }\n            }\n        }\n        get v3() {\n            return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n        }\n        set v3(value: string) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get v4() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set v4(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get scene() {\n            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n        }\n        set scene(value: number) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        static fromObject(data: {\n            v3?: string;\n            v4?: string;\n            scene?: number;\n        }): Verification {\n            const message = new Verification({});\n            if (data.v3 != null) {\n                message.v3 = data.v3;\n            }\n            if (data.v4 != null) {\n                message.v4 = data.v4;\n            }\n            if (data.scene != null) {\n                message.scene = data.scene;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                v3?: string;\n                v4?: string;\n                scene?: number;\n            } = {};\n            if (this.v3 != null) {\n                data.v3 = this.v3;\n            }\n            if (this.v4 != null) {\n                data.v4 = this.v4;\n            }\n            if (this.scene != null) {\n                data.scene = this.scene;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.v3.length)\n                writer.writeString(1, this.v3);\n            if (this.v4.length)\n                writer.writeString(2, this.v4);\n            if (this.scene != 0)\n                writer.writeInt32(3, this.scene);\n            if (!w)\n                return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Verification {\n            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Verification();\n            while (reader.nextField()) {\n                if (reader.isEndGroup())\n                    break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.v3 = reader.readString();\n                        break;\n                    case 2:\n                        message.v4 = reader.readString();\n                        break;\n                    case 3:\n                        message.scene = reader.readInt32();\n                        break;\n                    default: reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): Verification {\n            return Verification.deserialize(bytes);\n        }\n    }\n    export class MemberMgmt extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(data?: any[] | {\n            roomid?: string;\n            wxids?: string;\n        }) {\n            super();\n            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"roomid\" in data && data.roomid != undefined) {\n                    this.roomid = data.roomid;\n                }\n                if (\"wxids\" in data && data.wxids != undefined) {\n                    this.wxids = data.wxids;\n                }\n            }\n        }\n        get roomid() {\n            return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n        }\n        set roomid(value: string) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get wxids() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set wxids(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: {\n            roomid?: string;\n            wxids?: string;\n        }): MemberMgmt {\n            const message = new MemberMgmt({});\n            if (data.roomid != null) {\n                message.roomid = data.roomid;\n            }\n            if (data.wxids != null) {\n                message.wxids = data.wxids;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                roomid?: string;\n                wxids?: string;\n            } = {};\n            if (this.roomid != null) {\n                data.roomid = this.roomid;\n            }\n            if (this.wxids != null) {\n                data.wxids = this.wxids;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.roomid.length)\n                writer.writeString(1, this.roomid);\n            if (this.wxids.length)\n                writer.writeString(2, this.wxids);\n            if (!w)\n                return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MemberMgmt {\n            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MemberMgmt();\n            while (reader.nextField()) {\n                if (reader.isEndGroup())\n                    break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.roomid = reader.readString();\n                        break;\n                    case 2:\n                        message.wxids = reader.readString();\n                        break;\n                    default: reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): MemberMgmt {\n            return MemberMgmt.deserialize(bytes);\n        }\n    }\n    export class UserInfo extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(data?: any[] | {\n            wxid?: string;\n            name?: string;\n            mobile?: string;\n            home?: string;\n        }) {\n            super();\n            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"wxid\" in data && data.wxid != undefined) {\n                    this.wxid = data.wxid;\n                }\n                if (\"name\" in data && data.name != undefined) {\n                    this.name = data.name;\n                }\n                if (\"mobile\" in data && data.mobile != undefined) {\n                    this.mobile = data.mobile;\n                }\n                if (\"home\" in data && data.home != undefined) {\n                    this.home = data.home;\n                }\n            }\n        }\n        get wxid() {\n            return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n        }\n        set wxid(value: string) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get name() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set name(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get mobile() {\n            return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n        }\n        set mobile(value: string) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        get home() {\n            return pb_1.Message.getFieldWithDefault(this, 4, \"\") as string;\n        }\n        set home(value: string) {\n            pb_1.Message.setField(this, 4, value);\n        }\n        static fromObject(data: {\n            wxid?: string;\n            name?: string;\n            mobile?: string;\n            home?: string;\n        }): UserInfo {\n            const message = new UserInfo({});\n            if (data.wxid != null) {\n                message.wxid = data.wxid;\n            }\n            if (data.name != null) {\n                message.name = data.name;\n            }\n            if (data.mobile != null) {\n                message.mobile = data.mobile;\n            }\n            if (data.home != null) {\n                message.home = data.home;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                wxid?: string;\n                name?: string;\n                mobile?: string;\n                home?: string;\n            } = {};\n            if (this.wxid != null) {\n                data.wxid = this.wxid;\n            }\n            if (this.name != null) {\n                data.name = this.name;\n            }\n            if (this.mobile != null) {\n                data.mobile = this.mobile;\n            }\n            if (this.home != null) {\n                data.home = this.home;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.wxid.length)\n                writer.writeString(1, this.wxid);\n            if (this.name.length)\n                writer.writeString(2, this.name);\n            if (this.mobile.length)\n                writer.writeString(3, this.mobile);\n            if (this.home.length)\n                writer.writeString(4, this.home);\n            if (!w)\n                return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserInfo {\n            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserInfo();\n            while (reader.nextField()) {\n                if (reader.isEndGroup())\n                    break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.wxid = reader.readString();\n                        break;\n                    case 2:\n                        message.name = reader.readString();\n                        break;\n                    case 3:\n                        message.mobile = reader.readString();\n                        break;\n                    case 4:\n                        message.home = reader.readString();\n                        break;\n                    default: reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): UserInfo {\n            return UserInfo.deserialize(bytes);\n        }\n    }\n    export class DecPath extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(data?: any[] | {\n            src?: string;\n            dst?: string;\n        }) {\n            super();\n            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"src\" in data && data.src != undefined) {\n                    this.src = data.src;\n                }\n                if (\"dst\" in data && data.dst != undefined) {\n                    this.dst = data.dst;\n                }\n            }\n        }\n        get src() {\n            return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n        }\n        set src(value: string) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get dst() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set dst(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: {\n            src?: string;\n            dst?: string;\n        }): DecPath {\n            const message = new DecPath({});\n            if (data.src != null) {\n                message.src = data.src;\n            }\n            if (data.dst != null) {\n                message.dst = data.dst;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                src?: string;\n                dst?: string;\n            } = {};\n            if (this.src != null) {\n                data.src = this.src;\n            }\n            if (this.dst != null) {\n                data.dst = this.dst;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.src.length)\n                writer.writeString(1, this.src);\n            if (this.dst.length)\n                writer.writeString(2, this.dst);\n            if (!w)\n                return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DecPath {\n            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DecPath();\n            while (reader.nextField()) {\n                if (reader.isEndGroup())\n                    break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.src = reader.readString();\n                        break;\n                    case 2:\n                        message.dst = reader.readString();\n                        break;\n                    default: reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): DecPath {\n            return DecPath.deserialize(bytes);\n        }\n    }\n    export class Transfer extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(data?: any[] | {\n            wxid?: string;\n            tfid?: string;\n            taid?: string;\n        }) {\n            super();\n            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"wxid\" in data && data.wxid != undefined) {\n                    this.wxid = data.wxid;\n                }\n                if (\"tfid\" in data && data.tfid != undefined) {\n                    this.tfid = data.tfid;\n                }\n                if (\"taid\" in data && data.taid != undefined) {\n                    this.taid = data.taid;\n                }\n            }\n        }\n        get wxid() {\n            return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n        }\n        set wxid(value: string) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get tfid() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set tfid(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get taid() {\n            return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n        }\n        set taid(value: string) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        static fromObject(data: {\n            wxid?: string;\n            tfid?: string;\n            taid?: string;\n        }): Transfer {\n            const message = new Transfer({});\n            if (data.wxid != null) {\n                message.wxid = data.wxid;\n            }\n            if (data.tfid != null) {\n                message.tfid = data.tfid;\n            }\n            if (data.taid != null) {\n                message.taid = data.taid;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                wxid?: string;\n                tfid?: string;\n                taid?: string;\n            } = {};\n            if (this.wxid != null) {\n                data.wxid = this.wxid;\n            }\n            if (this.tfid != null) {\n                data.tfid = this.tfid;\n            }\n            if (this.taid != null) {\n                data.taid = this.taid;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.wxid.length)\n                writer.writeString(1, this.wxid);\n            if (this.tfid.length)\n                writer.writeString(2, this.tfid);\n            if (this.taid.length)\n                writer.writeString(3, this.taid);\n            if (!w)\n                return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Transfer {\n            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Transfer();\n            while (reader.nextField()) {\n                if (reader.isEndGroup())\n                    break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.wxid = reader.readString();\n                        break;\n                    case 2:\n                        message.tfid = reader.readString();\n                        break;\n                    case 3:\n                        message.taid = reader.readString();\n                        break;\n                    default: reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): Transfer {\n            return Transfer.deserialize(bytes);\n        }\n    }\n    export class AttachMsg extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(data?: any[] | {\n            id?: string;\n            thumb?: string;\n            extra?: string;\n        }) {\n            super();\n            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"id\" in data && data.id != undefined) {\n                    this.id = data.id;\n                }\n                if (\"thumb\" in data && data.thumb != undefined) {\n                    this.thumb = data.thumb;\n                }\n                if (\"extra\" in data && data.extra != undefined) {\n                    this.extra = data.extra;\n                }\n            }\n        }\n        get id() {\n            return pb_1.Message.getFieldWithDefault(this, 1, \"0\") as string;\n        }\n        set id(value: string) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get thumb() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set thumb(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get extra() {\n            return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n        }\n        set extra(value: string) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        static fromObject(data: {\n            id?: string;\n            thumb?: string;\n            extra?: string;\n        }): AttachMsg {\n            const message = new AttachMsg({});\n            if (data.id != null) {\n                message.id = data.id;\n            }\n            if (data.thumb != null) {\n                message.thumb = data.thumb;\n            }\n            if (data.extra != null) {\n                message.extra = data.extra;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                id?: string;\n                thumb?: string;\n                extra?: string;\n            } = {};\n            if (this.id != null) {\n                data.id = this.id;\n            }\n            if (this.thumb != null) {\n                data.thumb = this.thumb;\n            }\n            if (this.extra != null) {\n                data.extra = this.extra;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.id != \"0\")\n                writer.writeUint64String(1, this.id);\n            if (this.thumb.length)\n                writer.writeString(2, this.thumb);\n            if (this.extra.length)\n                writer.writeString(3, this.extra);\n            if (!w)\n                return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AttachMsg {\n            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AttachMsg();\n            while (reader.nextField()) {\n                if (reader.isEndGroup())\n                    break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.id = reader.readUint64String();\n                        break;\n                    case 2:\n                        message.thumb = reader.readString();\n                        break;\n                    case 3:\n                        message.extra = reader.readString();\n                        break;\n                    default: reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): AttachMsg {\n            return AttachMsg.deserialize(bytes);\n        }\n    }\n    export class AudioMsg extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(data?: any[] | {\n            id?: string;\n            dir?: string;\n        }) {\n            super();\n            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"id\" in data && data.id != undefined) {\n                    this.id = data.id;\n                }\n                if (\"dir\" in data && data.dir != undefined) {\n                    this.dir = data.dir;\n                }\n            }\n        }\n        get id() {\n            return pb_1.Message.getFieldWithDefault(this, 1, \"0\") as string;\n        }\n        set id(value: string) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get dir() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set dir(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: {\n            id?: string;\n            dir?: string;\n        }): AudioMsg {\n            const message = new AudioMsg({});\n            if (data.id != null) {\n                message.id = data.id;\n            }\n            if (data.dir != null) {\n                message.dir = data.dir;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                id?: string;\n                dir?: string;\n            } = {};\n            if (this.id != null) {\n                data.id = this.id;\n            }\n            if (this.dir != null) {\n                data.dir = this.dir;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.id != \"0\")\n                writer.writeUint64String(1, this.id);\n            if (this.dir.length)\n                writer.writeString(2, this.dir);\n            if (!w)\n                return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AudioMsg {\n            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AudioMsg();\n            while (reader.nextField()) {\n                if (reader.isEndGroup())\n                    break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.id = reader.readUint64String();\n                        break;\n                    case 2:\n                        message.dir = reader.readString();\n                        break;\n                    default: reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): AudioMsg {\n            return AudioMsg.deserialize(bytes);\n        }\n    }\n    export class RichText extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(data?: any[] | {\n            name?: string;\n            account?: string;\n            title?: string;\n            digest?: string;\n            url?: string;\n            thumburl?: string;\n            receiver?: string;\n        }) {\n            super();\n            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"name\" in data && data.name != undefined) {\n                    this.name = data.name;\n                }\n                if (\"account\" in data && data.account != undefined) {\n                    this.account = data.account;\n                }\n                if (\"title\" in data && data.title != undefined) {\n                    this.title = data.title;\n                }\n                if (\"digest\" in data && data.digest != undefined) {\n                    this.digest = data.digest;\n                }\n                if (\"url\" in data && data.url != undefined) {\n                    this.url = data.url;\n                }\n                if (\"thumburl\" in data && data.thumburl != undefined) {\n                    this.thumburl = data.thumburl;\n                }\n                if (\"receiver\" in data && data.receiver != undefined) {\n                    this.receiver = data.receiver;\n                }\n            }\n        }\n        get name() {\n            return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n        }\n        set name(value: string) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get account() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set account(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get title() {\n            return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n        }\n        set title(value: string) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        get digest() {\n            return pb_1.Message.getFieldWithDefault(this, 4, \"\") as string;\n        }\n        set digest(value: string) {\n            pb_1.Message.setField(this, 4, value);\n        }\n        get url() {\n            return pb_1.Message.getFieldWithDefault(this, 5, \"\") as string;\n        }\n        set url(value: string) {\n            pb_1.Message.setField(this, 5, value);\n        }\n        get thumburl() {\n            return pb_1.Message.getFieldWithDefault(this, 6, \"\") as string;\n        }\n        set thumburl(value: string) {\n            pb_1.Message.setField(this, 6, value);\n        }\n        get receiver() {\n            return pb_1.Message.getFieldWithDefault(this, 7, \"\") as string;\n        }\n        set receiver(value: string) {\n            pb_1.Message.setField(this, 7, value);\n        }\n        static fromObject(data: {\n            name?: string;\n            account?: string;\n            title?: string;\n            digest?: string;\n            url?: string;\n            thumburl?: string;\n            receiver?: string;\n        }): RichText {\n            const message = new RichText({});\n            if (data.name != null) {\n                message.name = data.name;\n            }\n            if (data.account != null) {\n                message.account = data.account;\n            }\n            if (data.title != null) {\n                message.title = data.title;\n            }\n            if (data.digest != null) {\n                message.digest = data.digest;\n            }\n            if (data.url != null) {\n                message.url = data.url;\n            }\n            if (data.thumburl != null) {\n                message.thumburl = data.thumburl;\n            }\n            if (data.receiver != null) {\n                message.receiver = data.receiver;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                name?: string;\n                account?: string;\n                title?: string;\n                digest?: string;\n                url?: string;\n                thumburl?: string;\n                receiver?: string;\n            } = {};\n            if (this.name != null) {\n                data.name = this.name;\n            }\n            if (this.account != null) {\n                data.account = this.account;\n            }\n            if (this.title != null) {\n                data.title = this.title;\n            }\n            if (this.digest != null) {\n                data.digest = this.digest;\n            }\n            if (this.url != null) {\n                data.url = this.url;\n            }\n            if (this.thumburl != null) {\n                data.thumburl = this.thumburl;\n            }\n            if (this.receiver != null) {\n                data.receiver = this.receiver;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.name.length)\n                writer.writeString(1, this.name);\n            if (this.account.length)\n                writer.writeString(2, this.account);\n            if (this.title.length)\n                writer.writeString(3, this.title);\n            if (this.digest.length)\n                writer.writeString(4, this.digest);\n            if (this.url.length)\n                writer.writeString(5, this.url);\n            if (this.thumburl.length)\n                writer.writeString(6, this.thumburl);\n            if (this.receiver.length)\n                writer.writeString(7, this.receiver);\n            if (!w)\n                return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RichText {\n            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RichText();\n            while (reader.nextField()) {\n                if (reader.isEndGroup())\n                    break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.name = reader.readString();\n                        break;\n                    case 2:\n                        message.account = reader.readString();\n                        break;\n                    case 3:\n                        message.title = reader.readString();\n                        break;\n                    case 4:\n                        message.digest = reader.readString();\n                        break;\n                    case 5:\n                        message.url = reader.readString();\n                        break;\n                    case 6:\n                        message.thumburl = reader.readString();\n                        break;\n                    case 7:\n                        message.receiver = reader.readString();\n                        break;\n                    default: reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): RichText {\n            return RichText.deserialize(bytes);\n        }\n    }\n    export class PatMsg extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(data?: any[] | {\n            roomid?: string;\n            wxid?: string;\n        }) {\n            super();\n            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"roomid\" in data && data.roomid != undefined) {\n                    this.roomid = data.roomid;\n                }\n                if (\"wxid\" in data && data.wxid != undefined) {\n                    this.wxid = data.wxid;\n                }\n            }\n        }\n        get roomid() {\n            return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n        }\n        set roomid(value: string) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get wxid() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set wxid(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: {\n            roomid?: string;\n            wxid?: string;\n        }): PatMsg {\n            const message = new PatMsg({});\n            if (data.roomid != null) {\n                message.roomid = data.roomid;\n            }\n            if (data.wxid != null) {\n                message.wxid = data.wxid;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                roomid?: string;\n                wxid?: string;\n            } = {};\n            if (this.roomid != null) {\n                data.roomid = this.roomid;\n            }\n            if (this.wxid != null) {\n                data.wxid = this.wxid;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.roomid.length)\n                writer.writeString(1, this.roomid);\n            if (this.wxid.length)\n                writer.writeString(2, this.wxid);\n            if (!w)\n                return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PatMsg {\n            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PatMsg();\n            while (reader.nextField()) {\n                if (reader.isEndGroup())\n                    break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.roomid = reader.readString();\n                        break;\n                    case 2:\n                        message.wxid = reader.readString();\n                        break;\n                    default: reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PatMsg {\n            return PatMsg.deserialize(bytes);\n        }\n    }\n    export class OcrMsg extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(data?: any[] | {\n            status?: number;\n            result?: string;\n        }) {\n            super();\n            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"status\" in data && data.status != undefined) {\n                    this.status = data.status;\n                }\n                if (\"result\" in data && data.result != undefined) {\n                    this.result = data.result;\n                }\n            }\n        }\n        get status() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set status(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get result() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set result(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: {\n            status?: number;\n            result?: string;\n        }): OcrMsg {\n            const message = new OcrMsg({});\n            if (data.status != null) {\n                message.status = data.status;\n            }\n            if (data.result != null) {\n                message.result = data.result;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                status?: number;\n                result?: string;\n            } = {};\n            if (this.status != null) {\n                data.status = this.status;\n            }\n            if (this.result != null) {\n                data.result = this.result;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.status != 0)\n                writer.writeInt32(1, this.status);\n            if (this.result.length)\n                writer.writeString(2, this.result);\n            if (!w)\n                return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OcrMsg {\n            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OcrMsg();\n            while (reader.nextField()) {\n                if (reader.isEndGroup())\n                    break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.status = reader.readInt32();\n                        break;\n                    case 2:\n                        message.result = reader.readString();\n                        break;\n                    default: reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): OcrMsg {\n            return OcrMsg.deserialize(bytes);\n        }\n    }\n    export class ForwardMsg extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(data?: any[] | {\n            id?: string;\n            receiver?: string;\n        }) {\n            super();\n            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"id\" in data && data.id != undefined) {\n                    this.id = data.id;\n                }\n                if (\"receiver\" in data && data.receiver != undefined) {\n                    this.receiver = data.receiver;\n                }\n            }\n        }\n        get id() {\n            return pb_1.Message.getFieldWithDefault(this, 1, \"0\") as string;\n        }\n        set id(value: string) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get receiver() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set receiver(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: {\n            id?: string;\n            receiver?: string;\n        }): ForwardMsg {\n            const message = new ForwardMsg({});\n            if (data.id != null) {\n                message.id = data.id;\n            }\n            if (data.receiver != null) {\n                message.receiver = data.receiver;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                id?: string;\n                receiver?: string;\n            } = {};\n            if (this.id != null) {\n                data.id = this.id;\n            }\n            if (this.receiver != null) {\n                data.receiver = this.receiver;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.id != \"0\")\n                writer.writeUint64String(1, this.id);\n            if (this.receiver.length)\n                writer.writeString(2, this.receiver);\n            if (!w)\n                return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ForwardMsg {\n            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ForwardMsg();\n            while (reader.nextField()) {\n                if (reader.isEndGroup())\n                    break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.id = reader.readUint64String();\n                        break;\n                    case 2:\n                        message.receiver = reader.readString();\n                        break;\n                    default: reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): ForwardMsg {\n            return ForwardMsg.deserialize(bytes);\n        }\n    }\n}\n"],"names":["wcf","Functions","Request","pb_1","Message","func","getFieldWithDefault","value","setField","empty","getWrapperField","Empty","setOneofWrapperField","one_of_decls","has_empty","getField","str","setOneofField","has_str","txt","TextMsg","has_txt","file","PathMsg","has_file","query","DbQuery","has_query","v","Verification","has_v","m","MemberMgmt","has_m","xml","XmlMsg","has_xml","dec","DecPath","has_dec","tf","Transfer","has_tf","ui64","has_ui64","flag","has_flag","att","AttachMsg","has_att","am","AudioMsg","has_am","rt","RichText","has_rt","pm","PatMsg","has_pm","fm","ForwardMsg","has_fm","msg","cases","computeOneofCase","fromObject","data","message","toObject","serialize","w","writer","BinaryWriter","writeEnum","writeMessage","writeString","writeUint64String","writeBool","getResultBuffer","deserialize","bytes","reader","BinaryReader","nextField","isEndGroup","getFieldNumber","readEnum","readMessage","readString","readUint64String","readBool","skipField","serializeBinary","deserializeBinary","constructor","initialize","Array","isArray","undefined","Response","status","has_status","wxmsg","WxMsg","has_wxmsg","types","MsgTypes","has_types","contacts","RpcContacts","has_contacts","dbs","DbNames","has_dbs","tables","DbTables","has_tables","rows","DbRows","has_rows","ui","UserInfo","has_ui","ocr","OcrMsg","has_ocr","writeInt32","readInt32","is_self","is_group","id","type","ts","roomid","content","sender","sign","thumb","extra","writeUint32","length","readUint32","receiver","aters","path","Map","Object","entries","map","key","Number","fromEntries","RpcContact","wxid","code","remark","name","country","province","city","gender","getRepeatedWrapperField","setRepeatedWrapperField","item","writeRepeatedMessage","addToRepeatedWrapperField","names","writeRepeatedString","addToRepeatedField","DbTable","sql","db","DbField","column","Uint8Array","writeBytes","readBytes","DbRow","fields","v3","v4","scene","wxids","mobile","home","src","dst","tfid","taid","dir","account","title","digest","url","thumburl","result"],"mappings":"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"}