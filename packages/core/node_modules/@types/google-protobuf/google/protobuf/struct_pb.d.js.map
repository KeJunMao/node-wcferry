{"version":3,"sources":["../../../../../../../../packages/core/node_modules/@types/google-protobuf/google/protobuf/struct_pb.d.ts"],"sourcesContent":["// package: google.protobuf\n// file: struct.proto\n\nimport * as jspb from \"../../index\";\n\nexport class Struct extends jspb.Message {\n    getFieldsMap(): jspb.Map<string, Value>;\n    clearFieldsMap(): Struct;\n\n    toJavaScript(): { [key: string]: JavaScriptValue };\n    static fromJavaScript(value: { [key: string]: JavaScriptValue }): Struct;\n\n    serializeBinary(): Uint8Array;\n    toObject(includeInstance?: boolean): Struct.AsObject;\n    static toObject(includeInstance: boolean, msg: Struct): Struct.AsObject;\n    static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };\n    static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> };\n    static serializeBinaryToWriter(message: Struct, writer: jspb.BinaryWriter): void;\n    static deserializeBinary(bytes: Uint8Array): Struct;\n    static deserializeBinaryFromReader(message: Struct, reader: jspb.BinaryReader): Struct;\n}\n\nexport namespace Struct {\n    export type AsObject = {\n        fieldsMap: Array<[string, Value.AsObject]>;\n    };\n}\n\nexport class Value extends jspb.Message {\n    hasNullValue(): boolean;\n    clearNullValue(): Value;\n    getNullValue(): NullValue;\n    setNullValue(value: NullValue): Value;\n\n    hasNumberValue(): boolean;\n    clearNumberValue(): Value;\n    getNumberValue(): number;\n    setNumberValue(value: number): Value;\n\n    hasStringValue(): boolean;\n    clearStringValue(): Value;\n    getStringValue(): string;\n    setStringValue(value: string): Value;\n\n    hasBoolValue(): boolean;\n    clearBoolValue(): Value;\n    getBoolValue(): boolean;\n    setBoolValue(value: boolean): Value;\n\n    hasStructValue(): boolean;\n    clearStructValue(): Value;\n    getStructValue(): Struct | undefined;\n    setStructValue(value?: Struct): Value;\n\n    hasListValue(): boolean;\n    clearListValue(): Value;\n    getListValue(): ListValue | undefined;\n    setListValue(value?: ListValue): Value;\n\n    getKindCase(): Value.KindCase;\n\n    toJavaScript(): JavaScriptValue;\n    static fromJavaScript(value: JavaScriptValue): Value;\n\n    serializeBinary(): Uint8Array;\n    toObject(includeInstance?: boolean): Value.AsObject;\n    static toObject(includeInstance: boolean, msg: Value): Value.AsObject;\n    static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };\n    static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> };\n    static serializeBinaryToWriter(message: Value, writer: jspb.BinaryWriter): void;\n    static deserializeBinary(bytes: Uint8Array): Value;\n    static deserializeBinaryFromReader(message: Value, reader: jspb.BinaryReader): Value;\n}\n\nexport namespace Value {\n    export type AsObject = {\n        nullValue: NullValue;\n        numberValue: number;\n        stringValue: string;\n        boolValue: boolean;\n        structValue?: Struct.AsObject | undefined;\n        listValue?: ListValue.AsObject | undefined;\n    };\n\n    export enum KindCase {\n        KIND_NOT_SET = 0,\n        NULL_VALUE = 1,\n        NUMBER_VALUE = 2,\n        STRING_VALUE = 3,\n        BOOL_VALUE = 4,\n        STRUCT_VALUE = 5,\n        LIST_VALUE = 6,\n    }\n}\n\nexport class ListValue extends jspb.Message {\n    clearValuesList(): ListValue;\n    getValuesList(): Value[];\n    setValuesList(value: Value[]): ListValue;\n    addValues(value?: Value, index?: number): Value;\n\n    toJavaScript(): JavaScriptValue[];\n    static fromJavaScript(value: JavaScriptValue[]): ListValue;\n\n    serializeBinary(): Uint8Array;\n    toObject(includeInstance?: boolean): ListValue.AsObject;\n    static toObject(includeInstance: boolean, msg: ListValue): ListValue.AsObject;\n    static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };\n    static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> };\n    static serializeBinaryToWriter(message: ListValue, writer: jspb.BinaryWriter): void;\n    static deserializeBinary(bytes: Uint8Array): ListValue;\n    static deserializeBinaryFromReader(message: ListValue, reader: jspb.BinaryReader): ListValue;\n}\n\nexport namespace ListValue {\n    export type AsObject = {\n        valuesList: Value.AsObject[];\n    };\n}\n\nexport enum NullValue {\n    NULL_VALUE = 0,\n}\n\nexport type JavaScriptValue = null | number | string | boolean | any[] | {};\n"],"names":["ListValue","Struct","Value","jspb","Message","KindCase","NullValue"],"mappings":"AAAA,2BAA2B;AAC3B,qBAAqB;;;;;;;;;;;;IA8FRA,SAAS;eAATA;;;;;IA1FAC,MAAM;eAANA;;IAuBAC,KAAK;eAALA;;;;iEAzBS;AAEf,IAAA,AAAMD,SAAN,MAAMA,eAAeE,OAAKC,OAAO;AAexC;AAQO,IAAA,AAAMF,QAAN,MAAMA,cAAcC,OAAKC,OAAO;AA4CvC;UAEiBF;;cAUDG;;;;;;;;OAAAA,iBAAAA,mBAAAA;AAShB,GAnBiBH,UAAAA;AAqBV,IAAA,AAAMF,YAAN,MAAMA,kBAAkBG,OAAKC,OAAO;AAiB3C;;UAQYE;;GAAAA,cAAAA"}