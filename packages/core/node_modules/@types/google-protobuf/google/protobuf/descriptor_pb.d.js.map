{"version":3,"sources":["../../../../../../../../packages/core/node_modules/@types/google-protobuf/google/protobuf/descriptor_pb.d.ts"],"sourcesContent":["// package: google.protobuf\n// file: descriptor.proto\n\nimport * as jspb from \"../../index\";\n\nexport class FileDescriptorSet extends jspb.Message {\n    clearFileList(): FileDescriptorSet;\n    getFileList(): FileDescriptorProto[];\n    setFileList(value: FileDescriptorProto[]): FileDescriptorSet;\n    addFile(value?: FileDescriptorProto, index?: number): FileDescriptorProto;\n\n    serializeBinary(): Uint8Array;\n    toObject(includeInstance?: boolean): FileDescriptorSet.AsObject;\n    static toObject(includeInstance: boolean, msg: FileDescriptorSet): FileDescriptorSet.AsObject;\n    static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };\n    static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> };\n    static serializeBinaryToWriter(message: FileDescriptorSet, writer: jspb.BinaryWriter): void;\n    static deserializeBinary(bytes: Uint8Array): FileDescriptorSet;\n    static deserializeBinaryFromReader(message: FileDescriptorSet, reader: jspb.BinaryReader): FileDescriptorSet;\n}\n\nexport namespace FileDescriptorSet {\n    export type AsObject = {\n        fileList: FileDescriptorProto.AsObject[];\n    };\n}\n\nexport class FileDescriptorProto extends jspb.Message {\n    hasName(): boolean;\n    clearName(): FileDescriptorProto;\n    getName(): string | undefined;\n    setName(value: string): FileDescriptorProto;\n\n    hasPackage(): boolean;\n    clearPackage(): FileDescriptorProto;\n    getPackage(): string | undefined;\n    setPackage(value: string): FileDescriptorProto;\n\n    clearDependencyList(): FileDescriptorProto;\n    getDependencyList(): string[];\n    setDependencyList(value: string[]): FileDescriptorProto;\n    addDependency(value: string, index?: number): string;\n\n    clearPublicDependencyList(): FileDescriptorProto;\n    getPublicDependencyList(): number[];\n    setPublicDependencyList(value: number[]): FileDescriptorProto;\n    addPublicDependency(value: number, index?: number): number;\n\n    clearWeakDependencyList(): FileDescriptorProto;\n    getWeakDependencyList(): number[];\n    setWeakDependencyList(value: number[]): FileDescriptorProto;\n    addWeakDependency(value: number, index?: number): number;\n\n    clearMessageTypeList(): FileDescriptorProto;\n    getMessageTypeList(): DescriptorProto[];\n    setMessageTypeList(value: DescriptorProto[]): FileDescriptorProto;\n    addMessageType(value?: DescriptorProto, index?: number): DescriptorProto;\n\n    clearEnumTypeList(): FileDescriptorProto;\n    getEnumTypeList(): EnumDescriptorProto[];\n    setEnumTypeList(value: EnumDescriptorProto[]): FileDescriptorProto;\n    addEnumType(value?: EnumDescriptorProto, index?: number): EnumDescriptorProto;\n\n    clearServiceList(): FileDescriptorProto;\n    getServiceList(): ServiceDescriptorProto[];\n    setServiceList(value: ServiceDescriptorProto[]): FileDescriptorProto;\n    addService(value?: ServiceDescriptorProto, index?: number): ServiceDescriptorProto;\n\n    clearExtensionList(): FileDescriptorProto;\n    getExtensionList(): FieldDescriptorProto[];\n    setExtensionList(value: FieldDescriptorProto[]): FileDescriptorProto;\n    addExtension(value?: FieldDescriptorProto, index?: number): FieldDescriptorProto;\n\n    hasOptions(): boolean;\n    clearOptions(): FileDescriptorProto;\n    getOptions(): FileOptions | undefined;\n    setOptions(value?: FileOptions): FileDescriptorProto;\n\n    hasSourceCodeInfo(): boolean;\n    clearSourceCodeInfo(): FileDescriptorProto;\n    getSourceCodeInfo(): SourceCodeInfo | undefined;\n    setSourceCodeInfo(value?: SourceCodeInfo): FileDescriptorProto;\n\n    hasSyntax(): boolean;\n    clearSyntax(): FileDescriptorProto;\n    getSyntax(): string | undefined;\n    setSyntax(value: string): FileDescriptorProto;\n\n    serializeBinary(): Uint8Array;\n    toObject(includeInstance?: boolean): FileDescriptorProto.AsObject;\n    static toObject(includeInstance: boolean, msg: FileDescriptorProto): FileDescriptorProto.AsObject;\n    static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };\n    static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> };\n    static serializeBinaryToWriter(message: FileDescriptorProto, writer: jspb.BinaryWriter): void;\n    static deserializeBinary(bytes: Uint8Array): FileDescriptorProto;\n    static deserializeBinaryFromReader(message: FileDescriptorProto, reader: jspb.BinaryReader): FileDescriptorProto;\n}\n\nexport namespace FileDescriptorProto {\n    export type AsObject = {\n        name?: string | undefined;\n        pb_package?: string | undefined;\n        dependencyList: string[];\n        publicDependencyList: number[];\n        weakDependencyList: number[];\n        messageTypeList: DescriptorProto.AsObject[];\n        enumTypeList: EnumDescriptorProto.AsObject[];\n        serviceList: ServiceDescriptorProto.AsObject[];\n        extensionList: FieldDescriptorProto.AsObject[];\n        options?: FileOptions.AsObject | undefined;\n        sourceCodeInfo?: SourceCodeInfo.AsObject | undefined;\n        syntax?: string | undefined;\n    };\n}\n\nexport class DescriptorProto extends jspb.Message {\n    hasName(): boolean;\n    clearName(): DescriptorProto;\n    getName(): string | undefined;\n    setName(value: string): DescriptorProto;\n\n    clearFieldList(): DescriptorProto;\n    getFieldList(): FieldDescriptorProto[];\n    setFieldList(value: FieldDescriptorProto[]): DescriptorProto;\n    addField(value?: FieldDescriptorProto, index?: number): FieldDescriptorProto;\n\n    clearExtensionList(): DescriptorProto;\n    getExtensionList(): FieldDescriptorProto[];\n    setExtensionList(value: FieldDescriptorProto[]): DescriptorProto;\n    addExtension(value?: FieldDescriptorProto, index?: number): FieldDescriptorProto;\n\n    clearNestedTypeList(): DescriptorProto;\n    getNestedTypeList(): DescriptorProto[];\n    setNestedTypeList(value: DescriptorProto[]): DescriptorProto;\n    addNestedType(value?: DescriptorProto, index?: number): DescriptorProto;\n\n    clearEnumTypeList(): DescriptorProto;\n    getEnumTypeList(): EnumDescriptorProto[];\n    setEnumTypeList(value: EnumDescriptorProto[]): DescriptorProto;\n    addEnumType(value?: EnumDescriptorProto, index?: number): EnumDescriptorProto;\n\n    clearExtensionRangeList(): DescriptorProto;\n    getExtensionRangeList(): DescriptorProto.ExtensionRange[];\n    setExtensionRangeList(value: DescriptorProto.ExtensionRange[]): DescriptorProto;\n    addExtensionRange(value?: DescriptorProto.ExtensionRange, index?: number): DescriptorProto.ExtensionRange;\n\n    clearOneofDeclList(): DescriptorProto;\n    getOneofDeclList(): OneofDescriptorProto[];\n    setOneofDeclList(value: OneofDescriptorProto[]): DescriptorProto;\n    addOneofDecl(value?: OneofDescriptorProto, index?: number): OneofDescriptorProto;\n\n    hasOptions(): boolean;\n    clearOptions(): DescriptorProto;\n    getOptions(): MessageOptions | undefined;\n    setOptions(value?: MessageOptions): DescriptorProto;\n\n    clearReservedRangeList(): DescriptorProto;\n    getReservedRangeList(): DescriptorProto.ReservedRange[];\n    setReservedRangeList(value: DescriptorProto.ReservedRange[]): DescriptorProto;\n    addReservedRange(value?: DescriptorProto.ReservedRange, index?: number): DescriptorProto.ReservedRange;\n\n    clearReservedNameList(): DescriptorProto;\n    getReservedNameList(): string[];\n    setReservedNameList(value: string[]): DescriptorProto;\n    addReservedName(value: string, index?: number): string;\n\n    serializeBinary(): Uint8Array;\n    toObject(includeInstance?: boolean): DescriptorProto.AsObject;\n    static toObject(includeInstance: boolean, msg: DescriptorProto): DescriptorProto.AsObject;\n    static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };\n    static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> };\n    static serializeBinaryToWriter(message: DescriptorProto, writer: jspb.BinaryWriter): void;\n    static deserializeBinary(bytes: Uint8Array): DescriptorProto;\n    static deserializeBinaryFromReader(message: DescriptorProto, reader: jspb.BinaryReader): DescriptorProto;\n}\n\nexport namespace DescriptorProto {\n    export type AsObject = {\n        name?: string | undefined;\n        fieldList: FieldDescriptorProto.AsObject[];\n        extensionList: FieldDescriptorProto.AsObject[];\n        nestedTypeList: AsObject[];\n        enumTypeList: EnumDescriptorProto.AsObject[];\n        extensionRangeList: ExtensionRange.AsObject[];\n        oneofDeclList: OneofDescriptorProto.AsObject[];\n        options?: MessageOptions.AsObject | undefined;\n        reservedRangeList: ReservedRange.AsObject[];\n        reservedNameList: string[];\n    };\n\n    export class ExtensionRange extends jspb.Message {\n        hasStart(): boolean;\n        clearStart(): ExtensionRange;\n        getStart(): number | undefined;\n        setStart(value: number): ExtensionRange;\n\n        hasEnd(): boolean;\n        clearEnd(): ExtensionRange;\n        getEnd(): number | undefined;\n        setEnd(value: number): ExtensionRange;\n\n        hasOptions(): boolean;\n        clearOptions(): ExtensionRange;\n        getOptions(): ExtensionRangeOptions | undefined;\n        setOptions(value?: ExtensionRangeOptions): ExtensionRange;\n\n        serializeBinary(): Uint8Array;\n        toObject(includeInstance?: boolean): ExtensionRange.AsObject;\n        static toObject(includeInstance: boolean, msg: ExtensionRange): ExtensionRange.AsObject;\n        static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };\n        static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> };\n        static serializeBinaryToWriter(message: ExtensionRange, writer: jspb.BinaryWriter): void;\n        static deserializeBinary(bytes: Uint8Array): ExtensionRange;\n        static deserializeBinaryFromReader(message: ExtensionRange, reader: jspb.BinaryReader): ExtensionRange;\n    }\n\n    export namespace ExtensionRange {\n        export type AsObject = {\n            start?: number | undefined;\n            end?: number | undefined;\n            options?: ExtensionRangeOptions.AsObject | undefined;\n        };\n    }\n\n    export class ReservedRange extends jspb.Message {\n        hasStart(): boolean;\n        clearStart(): ReservedRange;\n        getStart(): number | undefined;\n        setStart(value: number): ReservedRange;\n\n        hasEnd(): boolean;\n        clearEnd(): ReservedRange;\n        getEnd(): number | undefined;\n        setEnd(value: number): ReservedRange;\n\n        serializeBinary(): Uint8Array;\n        toObject(includeInstance?: boolean): ReservedRange.AsObject;\n        static toObject(includeInstance: boolean, msg: ReservedRange): ReservedRange.AsObject;\n        static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };\n        static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> };\n        static serializeBinaryToWriter(message: ReservedRange, writer: jspb.BinaryWriter): void;\n        static deserializeBinary(bytes: Uint8Array): ReservedRange;\n        static deserializeBinaryFromReader(message: ReservedRange, reader: jspb.BinaryReader): ReservedRange;\n    }\n\n    export namespace ReservedRange {\n        export type AsObject = {\n            start?: number | undefined;\n            end?: number | undefined;\n        };\n    }\n}\n\nexport class ExtensionRangeOptions extends jspb.Message {\n    clearUninterpretedOptionList(): ExtensionRangeOptions;\n    getUninterpretedOptionList(): UninterpretedOption[];\n    setUninterpretedOptionList(value: UninterpretedOption[]): ExtensionRangeOptions;\n    addUninterpretedOption(value?: UninterpretedOption, index?: number): UninterpretedOption;\n\n    serializeBinary(): Uint8Array;\n    toObject(includeInstance?: boolean): ExtensionRangeOptions.AsObject;\n    static toObject(includeInstance: boolean, msg: ExtensionRangeOptions): ExtensionRangeOptions.AsObject;\n    static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };\n    static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> };\n    static serializeBinaryToWriter(message: ExtensionRangeOptions, writer: jspb.BinaryWriter): void;\n    static deserializeBinary(bytes: Uint8Array): ExtensionRangeOptions;\n    static deserializeBinaryFromReader(\n        message: ExtensionRangeOptions,\n        reader: jspb.BinaryReader,\n    ): ExtensionRangeOptions;\n}\n\nexport namespace ExtensionRangeOptions {\n    export type AsObject = {\n        uninterpretedOptionList: UninterpretedOption.AsObject[];\n    };\n}\n\nexport class FieldDescriptorProto extends jspb.Message {\n    hasName(): boolean;\n    clearName(): FieldDescriptorProto;\n    getName(): string | undefined;\n    setName(value: string): FieldDescriptorProto;\n\n    hasNumber(): boolean;\n    clearNumber(): FieldDescriptorProto;\n    getNumber(): number | undefined;\n    setNumber(value: number): FieldDescriptorProto;\n\n    hasLabel(): boolean;\n    clearLabel(): FieldDescriptorProto;\n    getLabel(): FieldDescriptorProto.Label | undefined;\n    setLabel(value: FieldDescriptorProto.Label): FieldDescriptorProto;\n\n    hasType(): boolean;\n    clearType(): FieldDescriptorProto;\n    getType(): FieldDescriptorProto.Type | undefined;\n    setType(value: FieldDescriptorProto.Type): FieldDescriptorProto;\n\n    hasTypeName(): boolean;\n    clearTypeName(): FieldDescriptorProto;\n    getTypeName(): string | undefined;\n    setTypeName(value: string): FieldDescriptorProto;\n\n    hasExtendee(): boolean;\n    clearExtendee(): FieldDescriptorProto;\n    getExtendee(): string | undefined;\n    setExtendee(value: string): FieldDescriptorProto;\n\n    hasDefaultValue(): boolean;\n    clearDefaultValue(): FieldDescriptorProto;\n    getDefaultValue(): string | undefined;\n    setDefaultValue(value: string): FieldDescriptorProto;\n\n    hasOneofIndex(): boolean;\n    clearOneofIndex(): FieldDescriptorProto;\n    getOneofIndex(): number | undefined;\n    setOneofIndex(value: number): FieldDescriptorProto;\n\n    hasJsonName(): boolean;\n    clearJsonName(): FieldDescriptorProto;\n    getJsonName(): string | undefined;\n    setJsonName(value: string): FieldDescriptorProto;\n\n    hasOptions(): boolean;\n    clearOptions(): FieldDescriptorProto;\n    getOptions(): FieldOptions | undefined;\n    setOptions(value?: FieldOptions): FieldDescriptorProto;\n\n    hasProto3Optional(): boolean;\n    clearProto3Optional(): FieldDescriptorProto;\n    getProto3Optional(): boolean | undefined;\n    setProto3Optional(value: boolean): FieldDescriptorProto;\n\n    serializeBinary(): Uint8Array;\n    toObject(includeInstance?: boolean): FieldDescriptorProto.AsObject;\n    static toObject(includeInstance: boolean, msg: FieldDescriptorProto): FieldDescriptorProto.AsObject;\n    static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };\n    static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> };\n    static serializeBinaryToWriter(message: FieldDescriptorProto, writer: jspb.BinaryWriter): void;\n    static deserializeBinary(bytes: Uint8Array): FieldDescriptorProto;\n    static deserializeBinaryFromReader(message: FieldDescriptorProto, reader: jspb.BinaryReader): FieldDescriptorProto;\n}\n\nexport namespace FieldDescriptorProto {\n    export type AsObject = {\n        name?: string | undefined;\n        number?: number | undefined;\n        label?: Label | undefined;\n        type?: Type | undefined;\n        typeName?: string | undefined;\n        extendee?: string | undefined;\n        defaultValue?: string | undefined;\n        oneofIndex?: number | undefined;\n        jsonName?: string | undefined;\n        options?: FieldOptions.AsObject | undefined;\n        proto3Optional?: boolean | undefined;\n    };\n\n    export enum Type {\n        TYPE_DOUBLE = 1,\n        TYPE_FLOAT = 2,\n        TYPE_INT64 = 3,\n        TYPE_UINT64 = 4,\n        TYPE_INT32 = 5,\n        TYPE_FIXED64 = 6,\n        TYPE_FIXED32 = 7,\n        TYPE_BOOL = 8,\n        TYPE_STRING = 9,\n        TYPE_GROUP = 10,\n        TYPE_MESSAGE = 11,\n        TYPE_BYTES = 12,\n        TYPE_UINT32 = 13,\n        TYPE_ENUM = 14,\n        TYPE_SFIXED32 = 15,\n        TYPE_SFIXED64 = 16,\n        TYPE_SINT32 = 17,\n        TYPE_SINT64 = 18,\n    }\n\n    export enum Label {\n        LABEL_OPTIONAL = 1,\n        LABEL_REQUIRED = 2,\n        LABEL_REPEATED = 3,\n    }\n}\n\nexport class OneofDescriptorProto extends jspb.Message {\n    hasName(): boolean;\n    clearName(): OneofDescriptorProto;\n    getName(): string | undefined;\n    setName(value: string): OneofDescriptorProto;\n\n    hasOptions(): boolean;\n    clearOptions(): OneofDescriptorProto;\n    getOptions(): OneofOptions | undefined;\n    setOptions(value?: OneofOptions): OneofDescriptorProto;\n\n    serializeBinary(): Uint8Array;\n    toObject(includeInstance?: boolean): OneofDescriptorProto.AsObject;\n    static toObject(includeInstance: boolean, msg: OneofDescriptorProto): OneofDescriptorProto.AsObject;\n    static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };\n    static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> };\n    static serializeBinaryToWriter(message: OneofDescriptorProto, writer: jspb.BinaryWriter): void;\n    static deserializeBinary(bytes: Uint8Array): OneofDescriptorProto;\n    static deserializeBinaryFromReader(message: OneofDescriptorProto, reader: jspb.BinaryReader): OneofDescriptorProto;\n}\n\nexport namespace OneofDescriptorProto {\n    export type AsObject = {\n        name?: string | undefined;\n        options?: OneofOptions.AsObject | undefined;\n    };\n}\n\nexport class EnumDescriptorProto extends jspb.Message {\n    hasName(): boolean;\n    clearName(): EnumDescriptorProto;\n    getName(): string | undefined;\n    setName(value: string): EnumDescriptorProto;\n\n    clearValueList(): EnumDescriptorProto;\n    getValueList(): EnumValueDescriptorProto[];\n    setValueList(value: EnumValueDescriptorProto[]): EnumDescriptorProto;\n    addValue(value?: EnumValueDescriptorProto, index?: number): EnumValueDescriptorProto;\n\n    hasOptions(): boolean;\n    clearOptions(): EnumDescriptorProto;\n    getOptions(): EnumOptions | undefined;\n    setOptions(value?: EnumOptions): EnumDescriptorProto;\n\n    clearReservedRangeList(): EnumDescriptorProto;\n    getReservedRangeList(): EnumDescriptorProto.EnumReservedRange[];\n    setReservedRangeList(value: EnumDescriptorProto.EnumReservedRange[]): EnumDescriptorProto;\n    addReservedRange(\n        value?: EnumDescriptorProto.EnumReservedRange,\n        index?: number,\n    ): EnumDescriptorProto.EnumReservedRange;\n\n    clearReservedNameList(): EnumDescriptorProto;\n    getReservedNameList(): string[];\n    setReservedNameList(value: string[]): EnumDescriptorProto;\n    addReservedName(value: string, index?: number): string;\n\n    serializeBinary(): Uint8Array;\n    toObject(includeInstance?: boolean): EnumDescriptorProto.AsObject;\n    static toObject(includeInstance: boolean, msg: EnumDescriptorProto): EnumDescriptorProto.AsObject;\n    static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };\n    static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> };\n    static serializeBinaryToWriter(message: EnumDescriptorProto, writer: jspb.BinaryWriter): void;\n    static deserializeBinary(bytes: Uint8Array): EnumDescriptorProto;\n    static deserializeBinaryFromReader(message: EnumDescriptorProto, reader: jspb.BinaryReader): EnumDescriptorProto;\n}\n\nexport namespace EnumDescriptorProto {\n    export type AsObject = {\n        name?: string | undefined;\n        valueList: EnumValueDescriptorProto.AsObject[];\n        options?: EnumOptions.AsObject | undefined;\n        reservedRangeList: EnumReservedRange.AsObject[];\n        reservedNameList: string[];\n    };\n\n    export class EnumReservedRange extends jspb.Message {\n        hasStart(): boolean;\n        clearStart(): EnumReservedRange;\n        getStart(): number | undefined;\n        setStart(value: number): EnumReservedRange;\n\n        hasEnd(): boolean;\n        clearEnd(): EnumReservedRange;\n        getEnd(): number | undefined;\n        setEnd(value: number): EnumReservedRange;\n\n        serializeBinary(): Uint8Array;\n        toObject(includeInstance?: boolean): EnumReservedRange.AsObject;\n        static toObject(includeInstance: boolean, msg: EnumReservedRange): EnumReservedRange.AsObject;\n        static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };\n        static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> };\n        static serializeBinaryToWriter(message: EnumReservedRange, writer: jspb.BinaryWriter): void;\n        static deserializeBinary(bytes: Uint8Array): EnumReservedRange;\n        static deserializeBinaryFromReader(message: EnumReservedRange, reader: jspb.BinaryReader): EnumReservedRange;\n    }\n\n    export namespace EnumReservedRange {\n        export type AsObject = {\n            start?: number | undefined;\n            end?: number | undefined;\n        };\n    }\n}\n\nexport class EnumValueDescriptorProto extends jspb.Message {\n    hasName(): boolean;\n    clearName(): EnumValueDescriptorProto;\n    getName(): string | undefined;\n    setName(value: string): EnumValueDescriptorProto;\n\n    hasNumber(): boolean;\n    clearNumber(): EnumValueDescriptorProto;\n    getNumber(): number | undefined;\n    setNumber(value: number): EnumValueDescriptorProto;\n\n    hasOptions(): boolean;\n    clearOptions(): EnumValueDescriptorProto;\n    getOptions(): EnumValueOptions | undefined;\n    setOptions(value?: EnumValueOptions): EnumValueDescriptorProto;\n\n    serializeBinary(): Uint8Array;\n    toObject(includeInstance?: boolean): EnumValueDescriptorProto.AsObject;\n    static toObject(includeInstance: boolean, msg: EnumValueDescriptorProto): EnumValueDescriptorProto.AsObject;\n    static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };\n    static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> };\n    static serializeBinaryToWriter(message: EnumValueDescriptorProto, writer: jspb.BinaryWriter): void;\n    static deserializeBinary(bytes: Uint8Array): EnumValueDescriptorProto;\n    static deserializeBinaryFromReader(\n        message: EnumValueDescriptorProto,\n        reader: jspb.BinaryReader,\n    ): EnumValueDescriptorProto;\n}\n\nexport namespace EnumValueDescriptorProto {\n    export type AsObject = {\n        name?: string | undefined;\n        number?: number | undefined;\n        options?: EnumValueOptions.AsObject | undefined;\n    };\n}\n\nexport class ServiceDescriptorProto extends jspb.Message {\n    hasName(): boolean;\n    clearName(): ServiceDescriptorProto;\n    getName(): string | undefined;\n    setName(value: string): ServiceDescriptorProto;\n\n    clearMethodList(): ServiceDescriptorProto;\n    getMethodList(): MethodDescriptorProto[];\n    setMethodList(value: MethodDescriptorProto[]): ServiceDescriptorProto;\n    addMethod(value?: MethodDescriptorProto, index?: number): MethodDescriptorProto;\n\n    hasOptions(): boolean;\n    clearOptions(): ServiceDescriptorProto;\n    getOptions(): ServiceOptions | undefined;\n    setOptions(value?: ServiceOptions): ServiceDescriptorProto;\n\n    serializeBinary(): Uint8Array;\n    toObject(includeInstance?: boolean): ServiceDescriptorProto.AsObject;\n    static toObject(includeInstance: boolean, msg: ServiceDescriptorProto): ServiceDescriptorProto.AsObject;\n    static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };\n    static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> };\n    static serializeBinaryToWriter(message: ServiceDescriptorProto, writer: jspb.BinaryWriter): void;\n    static deserializeBinary(bytes: Uint8Array): ServiceDescriptorProto;\n    static deserializeBinaryFromReader(\n        message: ServiceDescriptorProto,\n        reader: jspb.BinaryReader,\n    ): ServiceDescriptorProto;\n}\n\nexport namespace ServiceDescriptorProto {\n    export type AsObject = {\n        name?: string | undefined;\n        methodList: MethodDescriptorProto.AsObject[];\n        options?: ServiceOptions.AsObject | undefined;\n    };\n}\n\nexport class MethodDescriptorProto extends jspb.Message {\n    hasName(): boolean;\n    clearName(): MethodDescriptorProto;\n    getName(): string | undefined;\n    setName(value: string): MethodDescriptorProto;\n\n    hasInputType(): boolean;\n    clearInputType(): MethodDescriptorProto;\n    getInputType(): string | undefined;\n    setInputType(value: string): MethodDescriptorProto;\n\n    hasOutputType(): boolean;\n    clearOutputType(): MethodDescriptorProto;\n    getOutputType(): string | undefined;\n    setOutputType(value: string): MethodDescriptorProto;\n\n    hasOptions(): boolean;\n    clearOptions(): MethodDescriptorProto;\n    getOptions(): MethodOptions | undefined;\n    setOptions(value?: MethodOptions): MethodDescriptorProto;\n\n    hasClientStreaming(): boolean;\n    clearClientStreaming(): MethodDescriptorProto;\n    getClientStreaming(): boolean | undefined;\n    setClientStreaming(value: boolean): MethodDescriptorProto;\n\n    hasServerStreaming(): boolean;\n    clearServerStreaming(): MethodDescriptorProto;\n    getServerStreaming(): boolean | undefined;\n    setServerStreaming(value: boolean): MethodDescriptorProto;\n\n    serializeBinary(): Uint8Array;\n    toObject(includeInstance?: boolean): MethodDescriptorProto.AsObject;\n    static toObject(includeInstance: boolean, msg: MethodDescriptorProto): MethodDescriptorProto.AsObject;\n    static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };\n    static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> };\n    static serializeBinaryToWriter(message: MethodDescriptorProto, writer: jspb.BinaryWriter): void;\n    static deserializeBinary(bytes: Uint8Array): MethodDescriptorProto;\n    static deserializeBinaryFromReader(\n        message: MethodDescriptorProto,\n        reader: jspb.BinaryReader,\n    ): MethodDescriptorProto;\n}\n\nexport namespace MethodDescriptorProto {\n    export type AsObject = {\n        name?: string | undefined;\n        inputType?: string | undefined;\n        outputType?: string | undefined;\n        options?: MethodOptions.AsObject | undefined;\n        clientStreaming?: boolean | undefined;\n        serverStreaming?: boolean | undefined;\n    };\n}\n\nexport class FileOptions extends jspb.Message {\n    hasJavaPackage(): boolean;\n    clearJavaPackage(): FileOptions;\n    getJavaPackage(): string | undefined;\n    setJavaPackage(value: string): FileOptions;\n\n    hasJavaOuterClassname(): boolean;\n    clearJavaOuterClassname(): FileOptions;\n    getJavaOuterClassname(): string | undefined;\n    setJavaOuterClassname(value: string): FileOptions;\n\n    hasJavaMultipleFiles(): boolean;\n    clearJavaMultipleFiles(): FileOptions;\n    getJavaMultipleFiles(): boolean | undefined;\n    setJavaMultipleFiles(value: boolean): FileOptions;\n\n    hasJavaGenerateEqualsAndHash(): boolean;\n    clearJavaGenerateEqualsAndHash(): FileOptions;\n    getJavaGenerateEqualsAndHash(): boolean | undefined;\n    setJavaGenerateEqualsAndHash(value: boolean): FileOptions;\n\n    hasJavaStringCheckUtf8(): boolean;\n    clearJavaStringCheckUtf8(): FileOptions;\n    getJavaStringCheckUtf8(): boolean | undefined;\n    setJavaStringCheckUtf8(value: boolean): FileOptions;\n\n    hasOptimizeFor(): boolean;\n    clearOptimizeFor(): FileOptions;\n    getOptimizeFor(): FileOptions.OptimizeMode | undefined;\n    setOptimizeFor(value: FileOptions.OptimizeMode): FileOptions;\n\n    hasGoPackage(): boolean;\n    clearGoPackage(): FileOptions;\n    getGoPackage(): string | undefined;\n    setGoPackage(value: string): FileOptions;\n\n    hasCcGenericServices(): boolean;\n    clearCcGenericServices(): FileOptions;\n    getCcGenericServices(): boolean | undefined;\n    setCcGenericServices(value: boolean): FileOptions;\n\n    hasJavaGenericServices(): boolean;\n    clearJavaGenericServices(): FileOptions;\n    getJavaGenericServices(): boolean | undefined;\n    setJavaGenericServices(value: boolean): FileOptions;\n\n    hasPyGenericServices(): boolean;\n    clearPyGenericServices(): FileOptions;\n    getPyGenericServices(): boolean | undefined;\n    setPyGenericServices(value: boolean): FileOptions;\n\n    hasPhpGenericServices(): boolean;\n    clearPhpGenericServices(): FileOptions;\n    getPhpGenericServices(): boolean | undefined;\n    setPhpGenericServices(value: boolean): FileOptions;\n\n    hasDeprecated(): boolean;\n    clearDeprecated(): FileOptions;\n    getDeprecated(): boolean | undefined;\n    setDeprecated(value: boolean): FileOptions;\n\n    hasCcEnableArenas(): boolean;\n    clearCcEnableArenas(): FileOptions;\n    getCcEnableArenas(): boolean | undefined;\n    setCcEnableArenas(value: boolean): FileOptions;\n\n    hasObjcClassPrefix(): boolean;\n    clearObjcClassPrefix(): FileOptions;\n    getObjcClassPrefix(): string | undefined;\n    setObjcClassPrefix(value: string): FileOptions;\n\n    hasCsharpNamespace(): boolean;\n    clearCsharpNamespace(): FileOptions;\n    getCsharpNamespace(): string | undefined;\n    setCsharpNamespace(value: string): FileOptions;\n\n    hasSwiftPrefix(): boolean;\n    clearSwiftPrefix(): FileOptions;\n    getSwiftPrefix(): string | undefined;\n    setSwiftPrefix(value: string): FileOptions;\n\n    hasPhpClassPrefix(): boolean;\n    clearPhpClassPrefix(): FileOptions;\n    getPhpClassPrefix(): string | undefined;\n    setPhpClassPrefix(value: string): FileOptions;\n\n    hasPhpNamespace(): boolean;\n    clearPhpNamespace(): FileOptions;\n    getPhpNamespace(): string | undefined;\n    setPhpNamespace(value: string): FileOptions;\n\n    hasPhpMetadataNamespace(): boolean;\n    clearPhpMetadataNamespace(): FileOptions;\n    getPhpMetadataNamespace(): string | undefined;\n    setPhpMetadataNamespace(value: string): FileOptions;\n\n    hasRubyPackage(): boolean;\n    clearRubyPackage(): FileOptions;\n    getRubyPackage(): string | undefined;\n    setRubyPackage(value: string): FileOptions;\n\n    clearUninterpretedOptionList(): FileOptions;\n    getUninterpretedOptionList(): UninterpretedOption[];\n    setUninterpretedOptionList(value: UninterpretedOption[]): FileOptions;\n    addUninterpretedOption(value?: UninterpretedOption, index?: number): UninterpretedOption;\n\n    serializeBinary(): Uint8Array;\n    toObject(includeInstance?: boolean): FileOptions.AsObject;\n    static toObject(includeInstance: boolean, msg: FileOptions): FileOptions.AsObject;\n    static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };\n    static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> };\n    static serializeBinaryToWriter(message: FileOptions, writer: jspb.BinaryWriter): void;\n    static deserializeBinary(bytes: Uint8Array): FileOptions;\n    static deserializeBinaryFromReader(message: FileOptions, reader: jspb.BinaryReader): FileOptions;\n}\n\nexport namespace FileOptions {\n    export type AsObject = {\n        javaPackage?: string | undefined;\n        javaOuterClassname?: string | undefined;\n        javaMultipleFiles?: boolean | undefined;\n        javaGenerateEqualsAndHash?: boolean | undefined;\n        javaStringCheckUtf8?: boolean | undefined;\n        optimizeFor?: OptimizeMode | undefined;\n        goPackage?: string | undefined;\n        ccGenericServices?: boolean | undefined;\n        javaGenericServices?: boolean | undefined;\n        pyGenericServices?: boolean | undefined;\n        phpGenericServices?: boolean | undefined;\n        deprecated?: boolean | undefined;\n        ccEnableArenas?: boolean | undefined;\n        objcClassPrefix?: string | undefined;\n        csharpNamespace?: string | undefined;\n        swiftPrefix?: string | undefined;\n        phpClassPrefix?: string | undefined;\n        phpNamespace?: string | undefined;\n        phpMetadataNamespace?: string | undefined;\n        rubyPackage?: string | undefined;\n        uninterpretedOptionList: UninterpretedOption.AsObject[];\n    };\n\n    export enum OptimizeMode {\n        SPEED = 1,\n        CODE_SIZE = 2,\n        LITE_RUNTIME = 3,\n    }\n}\n\nexport class MessageOptions extends jspb.Message {\n    hasMessageSetWireFormat(): boolean;\n    clearMessageSetWireFormat(): MessageOptions;\n    getMessageSetWireFormat(): boolean | undefined;\n    setMessageSetWireFormat(value: boolean): MessageOptions;\n\n    hasNoStandardDescriptorAccessor(): boolean;\n    clearNoStandardDescriptorAccessor(): MessageOptions;\n    getNoStandardDescriptorAccessor(): boolean | undefined;\n    setNoStandardDescriptorAccessor(value: boolean): MessageOptions;\n\n    hasDeprecated(): boolean;\n    clearDeprecated(): MessageOptions;\n    getDeprecated(): boolean | undefined;\n    setDeprecated(value: boolean): MessageOptions;\n\n    hasMapEntry(): boolean;\n    clearMapEntry(): MessageOptions;\n    getMapEntry(): boolean | undefined;\n    setMapEntry(value: boolean): MessageOptions;\n\n    clearUninterpretedOptionList(): MessageOptions;\n    getUninterpretedOptionList(): UninterpretedOption[];\n    setUninterpretedOptionList(value: UninterpretedOption[]): MessageOptions;\n    addUninterpretedOption(value?: UninterpretedOption, index?: number): UninterpretedOption;\n\n    serializeBinary(): Uint8Array;\n    toObject(includeInstance?: boolean): MessageOptions.AsObject;\n    static toObject(includeInstance: boolean, msg: MessageOptions): MessageOptions.AsObject;\n    static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };\n    static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> };\n    static serializeBinaryToWriter(message: MessageOptions, writer: jspb.BinaryWriter): void;\n    static deserializeBinary(bytes: Uint8Array): MessageOptions;\n    static deserializeBinaryFromReader(message: MessageOptions, reader: jspb.BinaryReader): MessageOptions;\n}\n\nexport namespace MessageOptions {\n    export type AsObject = {\n        messageSetWireFormat?: boolean | undefined;\n        noStandardDescriptorAccessor?: boolean | undefined;\n        deprecated?: boolean | undefined;\n        mapEntry?: boolean | undefined;\n        uninterpretedOptionList: UninterpretedOption.AsObject[];\n    };\n}\n\nexport class FieldOptions extends jspb.Message {\n    hasCtype(): boolean;\n    clearCtype(): FieldOptions;\n    getCtype(): FieldOptions.CType | undefined;\n    setCtype(value: FieldOptions.CType): FieldOptions;\n\n    hasPacked(): boolean;\n    clearPacked(): FieldOptions;\n    getPacked(): boolean | undefined;\n    setPacked(value: boolean): FieldOptions;\n\n    hasJstype(): boolean;\n    clearJstype(): FieldOptions;\n    getJstype(): FieldOptions.JSType | undefined;\n    setJstype(value: FieldOptions.JSType): FieldOptions;\n\n    hasLazy(): boolean;\n    clearLazy(): FieldOptions;\n    getLazy(): boolean | undefined;\n    setLazy(value: boolean): FieldOptions;\n\n    hasDeprecated(): boolean;\n    clearDeprecated(): FieldOptions;\n    getDeprecated(): boolean | undefined;\n    setDeprecated(value: boolean): FieldOptions;\n\n    hasWeak(): boolean;\n    clearWeak(): FieldOptions;\n    getWeak(): boolean | undefined;\n    setWeak(value: boolean): FieldOptions;\n\n    clearUninterpretedOptionList(): FieldOptions;\n    getUninterpretedOptionList(): UninterpretedOption[];\n    setUninterpretedOptionList(value: UninterpretedOption[]): FieldOptions;\n    addUninterpretedOption(value?: UninterpretedOption, index?: number): UninterpretedOption;\n\n    serializeBinary(): Uint8Array;\n    toObject(includeInstance?: boolean): FieldOptions.AsObject;\n    static toObject(includeInstance: boolean, msg: FieldOptions): FieldOptions.AsObject;\n    static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };\n    static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> };\n    static serializeBinaryToWriter(message: FieldOptions, writer: jspb.BinaryWriter): void;\n    static deserializeBinary(bytes: Uint8Array): FieldOptions;\n    static deserializeBinaryFromReader(message: FieldOptions, reader: jspb.BinaryReader): FieldOptions;\n}\n\nexport namespace FieldOptions {\n    export type AsObject = {\n        ctype?: CType | undefined;\n        packed?: boolean | undefined;\n        jstype?: JSType | undefined;\n        lazy?: boolean | undefined;\n        deprecated?: boolean | undefined;\n        weak?: boolean | undefined;\n        uninterpretedOptionList: UninterpretedOption.AsObject[];\n    };\n\n    export enum CType {\n        STRING = 0,\n        CORD = 1,\n        STRING_PIECE = 2,\n    }\n\n    export enum JSType {\n        JS_NORMAL = 0,\n        JS_STRING = 1,\n        JS_NUMBER = 2,\n    }\n}\n\nexport class OneofOptions extends jspb.Message {\n    clearUninterpretedOptionList(): OneofOptions;\n    getUninterpretedOptionList(): UninterpretedOption[];\n    setUninterpretedOptionList(value: UninterpretedOption[]): OneofOptions;\n    addUninterpretedOption(value?: UninterpretedOption, index?: number): UninterpretedOption;\n\n    serializeBinary(): Uint8Array;\n    toObject(includeInstance?: boolean): OneofOptions.AsObject;\n    static toObject(includeInstance: boolean, msg: OneofOptions): OneofOptions.AsObject;\n    static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };\n    static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> };\n    static serializeBinaryToWriter(message: OneofOptions, writer: jspb.BinaryWriter): void;\n    static deserializeBinary(bytes: Uint8Array): OneofOptions;\n    static deserializeBinaryFromReader(message: OneofOptions, reader: jspb.BinaryReader): OneofOptions;\n}\n\nexport namespace OneofOptions {\n    export type AsObject = {\n        uninterpretedOptionList: UninterpretedOption.AsObject[];\n    };\n}\n\nexport class EnumOptions extends jspb.Message {\n    hasAllowAlias(): boolean;\n    clearAllowAlias(): EnumOptions;\n    getAllowAlias(): boolean | undefined;\n    setAllowAlias(value: boolean): EnumOptions;\n\n    hasDeprecated(): boolean;\n    clearDeprecated(): EnumOptions;\n    getDeprecated(): boolean | undefined;\n    setDeprecated(value: boolean): EnumOptions;\n\n    clearUninterpretedOptionList(): EnumOptions;\n    getUninterpretedOptionList(): UninterpretedOption[];\n    setUninterpretedOptionList(value: UninterpretedOption[]): EnumOptions;\n    addUninterpretedOption(value?: UninterpretedOption, index?: number): UninterpretedOption;\n\n    serializeBinary(): Uint8Array;\n    toObject(includeInstance?: boolean): EnumOptions.AsObject;\n    static toObject(includeInstance: boolean, msg: EnumOptions): EnumOptions.AsObject;\n    static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };\n    static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> };\n    static serializeBinaryToWriter(message: EnumOptions, writer: jspb.BinaryWriter): void;\n    static deserializeBinary(bytes: Uint8Array): EnumOptions;\n    static deserializeBinaryFromReader(message: EnumOptions, reader: jspb.BinaryReader): EnumOptions;\n}\n\nexport namespace EnumOptions {\n    export type AsObject = {\n        allowAlias?: boolean | undefined;\n        deprecated?: boolean | undefined;\n        uninterpretedOptionList: UninterpretedOption.AsObject[];\n    };\n}\n\nexport class EnumValueOptions extends jspb.Message {\n    hasDeprecated(): boolean;\n    clearDeprecated(): EnumValueOptions;\n    getDeprecated(): boolean | undefined;\n    setDeprecated(value: boolean): EnumValueOptions;\n\n    clearUninterpretedOptionList(): EnumValueOptions;\n    getUninterpretedOptionList(): UninterpretedOption[];\n    setUninterpretedOptionList(value: UninterpretedOption[]): EnumValueOptions;\n    addUninterpretedOption(value?: UninterpretedOption, index?: number): UninterpretedOption;\n\n    serializeBinary(): Uint8Array;\n    toObject(includeInstance?: boolean): EnumValueOptions.AsObject;\n    static toObject(includeInstance: boolean, msg: EnumValueOptions): EnumValueOptions.AsObject;\n    static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };\n    static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> };\n    static serializeBinaryToWriter(message: EnumValueOptions, writer: jspb.BinaryWriter): void;\n    static deserializeBinary(bytes: Uint8Array): EnumValueOptions;\n    static deserializeBinaryFromReader(message: EnumValueOptions, reader: jspb.BinaryReader): EnumValueOptions;\n}\n\nexport namespace EnumValueOptions {\n    export type AsObject = {\n        deprecated?: boolean | undefined;\n        uninterpretedOptionList: UninterpretedOption.AsObject[];\n    };\n}\n\nexport class ServiceOptions extends jspb.Message {\n    hasDeprecated(): boolean;\n    clearDeprecated(): ServiceOptions;\n    getDeprecated(): boolean | undefined;\n    setDeprecated(value: boolean): ServiceOptions;\n\n    clearUninterpretedOptionList(): ServiceOptions;\n    getUninterpretedOptionList(): UninterpretedOption[];\n    setUninterpretedOptionList(value: UninterpretedOption[]): ServiceOptions;\n    addUninterpretedOption(value?: UninterpretedOption, index?: number): UninterpretedOption;\n\n    serializeBinary(): Uint8Array;\n    toObject(includeInstance?: boolean): ServiceOptions.AsObject;\n    static toObject(includeInstance: boolean, msg: ServiceOptions): ServiceOptions.AsObject;\n    static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };\n    static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> };\n    static serializeBinaryToWriter(message: ServiceOptions, writer: jspb.BinaryWriter): void;\n    static deserializeBinary(bytes: Uint8Array): ServiceOptions;\n    static deserializeBinaryFromReader(message: ServiceOptions, reader: jspb.BinaryReader): ServiceOptions;\n}\n\nexport namespace ServiceOptions {\n    export type AsObject = {\n        deprecated?: boolean | undefined;\n        uninterpretedOptionList: UninterpretedOption.AsObject[];\n    };\n}\n\nexport class MethodOptions extends jspb.Message {\n    hasDeprecated(): boolean;\n    clearDeprecated(): MethodOptions;\n    getDeprecated(): boolean | undefined;\n    setDeprecated(value: boolean): MethodOptions;\n\n    hasIdempotencyLevel(): boolean;\n    clearIdempotencyLevel(): MethodOptions;\n    getIdempotencyLevel(): MethodOptions.IdempotencyLevel | undefined;\n    setIdempotencyLevel(value: MethodOptions.IdempotencyLevel): MethodOptions;\n\n    clearUninterpretedOptionList(): MethodOptions;\n    getUninterpretedOptionList(): UninterpretedOption[];\n    setUninterpretedOptionList(value: UninterpretedOption[]): MethodOptions;\n    addUninterpretedOption(value?: UninterpretedOption, index?: number): UninterpretedOption;\n\n    serializeBinary(): Uint8Array;\n    toObject(includeInstance?: boolean): MethodOptions.AsObject;\n    static toObject(includeInstance: boolean, msg: MethodOptions): MethodOptions.AsObject;\n    static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };\n    static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> };\n    static serializeBinaryToWriter(message: MethodOptions, writer: jspb.BinaryWriter): void;\n    static deserializeBinary(bytes: Uint8Array): MethodOptions;\n    static deserializeBinaryFromReader(message: MethodOptions, reader: jspb.BinaryReader): MethodOptions;\n}\n\nexport namespace MethodOptions {\n    export type AsObject = {\n        deprecated?: boolean | undefined;\n        idempotencyLevel?: IdempotencyLevel | undefined;\n        uninterpretedOptionList: UninterpretedOption.AsObject[];\n    };\n\n    export enum IdempotencyLevel {\n        IDEMPOTENCY_UNKNOWN = 0,\n        NO_SIDE_EFFECTS = 1,\n        IDEMPOTENT = 2,\n    }\n}\n\nexport class UninterpretedOption extends jspb.Message {\n    clearNameList(): UninterpretedOption;\n    getNameList(): UninterpretedOption.NamePart[];\n    setNameList(value: UninterpretedOption.NamePart[]): UninterpretedOption;\n    addName(value?: UninterpretedOption.NamePart, index?: number): UninterpretedOption.NamePart;\n\n    hasIdentifierValue(): boolean;\n    clearIdentifierValue(): UninterpretedOption;\n    getIdentifierValue(): string | undefined;\n    setIdentifierValue(value: string): UninterpretedOption;\n\n    hasPositiveIntValue(): boolean;\n    clearPositiveIntValue(): UninterpretedOption;\n    getPositiveIntValue(): number | undefined;\n    setPositiveIntValue(value: number): UninterpretedOption;\n\n    hasNegativeIntValue(): boolean;\n    clearNegativeIntValue(): UninterpretedOption;\n    getNegativeIntValue(): number | undefined;\n    setNegativeIntValue(value: number): UninterpretedOption;\n\n    hasDoubleValue(): boolean;\n    clearDoubleValue(): UninterpretedOption;\n    getDoubleValue(): number | undefined;\n    setDoubleValue(value: number): UninterpretedOption;\n\n    hasStringValue(): boolean;\n    clearStringValue(): UninterpretedOption;\n    getStringValue(): Uint8Array | string;\n    getStringValue_asU8(): Uint8Array;\n    getStringValue_asB64(): string;\n    setStringValue(value: Uint8Array | string): UninterpretedOption;\n\n    hasAggregateValue(): boolean;\n    clearAggregateValue(): UninterpretedOption;\n    getAggregateValue(): string | undefined;\n    setAggregateValue(value: string): UninterpretedOption;\n\n    serializeBinary(): Uint8Array;\n    toObject(includeInstance?: boolean): UninterpretedOption.AsObject;\n    static toObject(includeInstance: boolean, msg: UninterpretedOption): UninterpretedOption.AsObject;\n    static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };\n    static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> };\n    static serializeBinaryToWriter(message: UninterpretedOption, writer: jspb.BinaryWriter): void;\n    static deserializeBinary(bytes: Uint8Array): UninterpretedOption;\n    static deserializeBinaryFromReader(message: UninterpretedOption, reader: jspb.BinaryReader): UninterpretedOption;\n}\n\nexport namespace UninterpretedOption {\n    export type AsObject = {\n        nameList: NamePart.AsObject[];\n        identifierValue?: string | undefined;\n        positiveIntValue?: number | undefined;\n        negativeIntValue?: number | undefined;\n        doubleValue?: number | undefined;\n        stringValue: Uint8Array | string;\n        aggregateValue?: string | undefined;\n    };\n\n    export class NamePart extends jspb.Message {\n        hasNamePart(): boolean;\n        clearNamePart(): NamePart;\n        getNamePart(): string | undefined;\n        setNamePart(value: string): NamePart;\n\n        hasIsExtension(): boolean;\n        clearIsExtension(): NamePart;\n        getIsExtension(): boolean | undefined;\n        setIsExtension(value: boolean): NamePart;\n\n        serializeBinary(): Uint8Array;\n        toObject(includeInstance?: boolean): NamePart.AsObject;\n        static toObject(includeInstance: boolean, msg: NamePart): NamePart.AsObject;\n        static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };\n        static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> };\n        static serializeBinaryToWriter(message: NamePart, writer: jspb.BinaryWriter): void;\n        static deserializeBinary(bytes: Uint8Array): NamePart;\n        static deserializeBinaryFromReader(message: NamePart, reader: jspb.BinaryReader): NamePart;\n    }\n\n    export namespace NamePart {\n        export type AsObject = {\n            namePart?: string | undefined;\n            isExtension?: boolean | undefined;\n        };\n    }\n}\n\nexport class SourceCodeInfo extends jspb.Message {\n    clearLocationList(): SourceCodeInfo;\n    getLocationList(): SourceCodeInfo.Location[];\n    setLocationList(value: SourceCodeInfo.Location[]): SourceCodeInfo;\n    addLocation(value?: SourceCodeInfo.Location, index?: number): SourceCodeInfo.Location;\n\n    serializeBinary(): Uint8Array;\n    toObject(includeInstance?: boolean): SourceCodeInfo.AsObject;\n    static toObject(includeInstance: boolean, msg: SourceCodeInfo): SourceCodeInfo.AsObject;\n    static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };\n    static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> };\n    static serializeBinaryToWriter(message: SourceCodeInfo, writer: jspb.BinaryWriter): void;\n    static deserializeBinary(bytes: Uint8Array): SourceCodeInfo;\n    static deserializeBinaryFromReader(message: SourceCodeInfo, reader: jspb.BinaryReader): SourceCodeInfo;\n}\n\nexport namespace SourceCodeInfo {\n    export type AsObject = {\n        locationList: Location.AsObject[];\n    };\n\n    export class Location extends jspb.Message {\n        clearPathList(): Location;\n        getPathList(): number[];\n        setPathList(value: number[]): Location;\n        addPath(value: number, index?: number): number;\n\n        clearSpanList(): Location;\n        getSpanList(): number[];\n        setSpanList(value: number[]): Location;\n        addSpan(value: number, index?: number): number;\n\n        hasLeadingComments(): boolean;\n        clearLeadingComments(): Location;\n        getLeadingComments(): string | undefined;\n        setLeadingComments(value: string): Location;\n\n        hasTrailingComments(): boolean;\n        clearTrailingComments(): Location;\n        getTrailingComments(): string | undefined;\n        setTrailingComments(value: string): Location;\n\n        clearLeadingDetachedCommentsList(): Location;\n        getLeadingDetachedCommentsList(): string[];\n        setLeadingDetachedCommentsList(value: string[]): Location;\n        addLeadingDetachedComments(value: string, index?: number): string;\n\n        serializeBinary(): Uint8Array;\n        toObject(includeInstance?: boolean): Location.AsObject;\n        static toObject(includeInstance: boolean, msg: Location): Location.AsObject;\n        static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };\n        static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> };\n        static serializeBinaryToWriter(message: Location, writer: jspb.BinaryWriter): void;\n        static deserializeBinary(bytes: Uint8Array): Location;\n        static deserializeBinaryFromReader(message: Location, reader: jspb.BinaryReader): Location;\n    }\n\n    export namespace Location {\n        export type AsObject = {\n            pathList: number[];\n            spanList: number[];\n            leadingComments?: string | undefined;\n            trailingComments?: string | undefined;\n            leadingDetachedCommentsList: string[];\n        };\n    }\n}\n\nexport class GeneratedCodeInfo extends jspb.Message {\n    clearAnnotationList(): GeneratedCodeInfo;\n    getAnnotationList(): GeneratedCodeInfo.Annotation[];\n    setAnnotationList(value: GeneratedCodeInfo.Annotation[]): GeneratedCodeInfo;\n    addAnnotation(value?: GeneratedCodeInfo.Annotation, index?: number): GeneratedCodeInfo.Annotation;\n\n    serializeBinary(): Uint8Array;\n    toObject(includeInstance?: boolean): GeneratedCodeInfo.AsObject;\n    static toObject(includeInstance: boolean, msg: GeneratedCodeInfo): GeneratedCodeInfo.AsObject;\n    static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };\n    static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> };\n    static serializeBinaryToWriter(message: GeneratedCodeInfo, writer: jspb.BinaryWriter): void;\n    static deserializeBinary(bytes: Uint8Array): GeneratedCodeInfo;\n    static deserializeBinaryFromReader(message: GeneratedCodeInfo, reader: jspb.BinaryReader): GeneratedCodeInfo;\n}\n\nexport namespace GeneratedCodeInfo {\n    export type AsObject = {\n        annotationList: Annotation.AsObject[];\n    };\n\n    export class Annotation extends jspb.Message {\n        clearPathList(): Annotation;\n        getPathList(): number[];\n        setPathList(value: number[]): Annotation;\n        addPath(value: number, index?: number): number;\n\n        hasSourceFile(): boolean;\n        clearSourceFile(): Annotation;\n        getSourceFile(): string | undefined;\n        setSourceFile(value: string): Annotation;\n\n        hasBegin(): boolean;\n        clearBegin(): Annotation;\n        getBegin(): number | undefined;\n        setBegin(value: number): Annotation;\n\n        hasEnd(): boolean;\n        clearEnd(): Annotation;\n        getEnd(): number | undefined;\n        setEnd(value: number): Annotation;\n\n        serializeBinary(): Uint8Array;\n        toObject(includeInstance?: boolean): Annotation.AsObject;\n        static toObject(includeInstance: boolean, msg: Annotation): Annotation.AsObject;\n        static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };\n        static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> };\n        static serializeBinaryToWriter(message: Annotation, writer: jspb.BinaryWriter): void;\n        static deserializeBinary(bytes: Uint8Array): Annotation;\n        static deserializeBinaryFromReader(message: Annotation, reader: jspb.BinaryReader): Annotation;\n    }\n\n    export namespace Annotation {\n        export type AsObject = {\n            pathList: number[];\n            sourceFile?: string | undefined;\n            begin?: number | undefined;\n            end?: number | undefined;\n        };\n    }\n}\n"],"names":["DescriptorProto","EnumDescriptorProto","EnumOptions","EnumValueDescriptorProto","EnumValueOptions","ExtensionRangeOptions","FieldDescriptorProto","FieldOptions","FileDescriptorProto","FileDescriptorSet","FileOptions","GeneratedCodeInfo","MessageOptions","MethodDescriptorProto","MethodOptions","OneofDescriptorProto","OneofOptions","ServiceDescriptorProto","ServiceOptions","SourceCodeInfo","UninterpretedOption","jspb","Message","ExtensionRange","ReservedRange","Type","Label","EnumReservedRange","OptimizeMode","CType","JSType","IdempotencyLevel","NamePart","Location","Annotation"],"mappings":"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"}