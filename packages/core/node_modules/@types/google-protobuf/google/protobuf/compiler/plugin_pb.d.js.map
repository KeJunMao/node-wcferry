{"version":3,"sources":["../../../../../../../../../packages/core/node_modules/@types/google-protobuf/google/protobuf/compiler/plugin_pb.d.ts"],"sourcesContent":["// package: google.protobuf.compiler\n// file: compiler/plugin.proto\n\nimport * as jspb from \"../../../index\";\nimport * as google_protobuf_descriptor_pb from \"../descriptor_pb\";\n\nexport class Version extends jspb.Message {\n    hasMajor(): boolean;\n    clearMajor(): Version;\n    getMajor(): number | undefined;\n    setMajor(value: number): Version;\n\n    hasMinor(): boolean;\n    clearMinor(): Version;\n    getMinor(): number | undefined;\n    setMinor(value: number): Version;\n\n    hasPatch(): boolean;\n    clearPatch(): Version;\n    getPatch(): number | undefined;\n    setPatch(value: number): Version;\n\n    hasSuffix(): boolean;\n    clearSuffix(): Version;\n    getSuffix(): string | undefined;\n    setSuffix(value: string): Version;\n\n    serializeBinary(): Uint8Array;\n    toObject(includeInstance?: boolean): Version.AsObject;\n    static toObject(includeInstance: boolean, msg: Version): Version.AsObject;\n    static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };\n    static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> };\n    static serializeBinaryToWriter(message: Version, writer: jspb.BinaryWriter): void;\n    static deserializeBinary(bytes: Uint8Array): Version;\n    static deserializeBinaryFromReader(message: Version, reader: jspb.BinaryReader): Version;\n}\n\nexport namespace Version {\n    export type AsObject = {\n        major?: number | undefined;\n        minor?: number | undefined;\n        patch?: number | undefined;\n        suffix?: string | undefined;\n    };\n}\n\nexport class CodeGeneratorRequest extends jspb.Message {\n    clearFileToGenerateList(): CodeGeneratorRequest;\n    getFileToGenerateList(): string[];\n    setFileToGenerateList(value: string[]): CodeGeneratorRequest;\n    addFileToGenerate(value: string, index?: number): string;\n\n    hasParameter(): boolean;\n    clearParameter(): CodeGeneratorRequest;\n    getParameter(): string | undefined;\n    setParameter(value: string): CodeGeneratorRequest;\n\n    clearProtoFileList(): CodeGeneratorRequest;\n    getProtoFileList(): google_protobuf_descriptor_pb.FileDescriptorProto[];\n    setProtoFileList(value: google_protobuf_descriptor_pb.FileDescriptorProto[]): CodeGeneratorRequest;\n    addProtoFile(\n        value?: google_protobuf_descriptor_pb.FileDescriptorProto,\n        index?: number,\n    ): google_protobuf_descriptor_pb.FileDescriptorProto;\n\n    hasCompilerVersion(): boolean;\n    clearCompilerVersion(): CodeGeneratorRequest;\n    getCompilerVersion(): Version | undefined;\n    setCompilerVersion(value?: Version): CodeGeneratorRequest;\n\n    serializeBinary(): Uint8Array;\n    toObject(includeInstance?: boolean): CodeGeneratorRequest.AsObject;\n    static toObject(includeInstance: boolean, msg: CodeGeneratorRequest): CodeGeneratorRequest.AsObject;\n    static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };\n    static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> };\n    static serializeBinaryToWriter(message: CodeGeneratorRequest, writer: jspb.BinaryWriter): void;\n    static deserializeBinary(bytes: Uint8Array): CodeGeneratorRequest;\n    static deserializeBinaryFromReader(message: CodeGeneratorRequest, reader: jspb.BinaryReader): CodeGeneratorRequest;\n}\n\nexport namespace CodeGeneratorRequest {\n    export type AsObject = {\n        fileToGenerateList: string[];\n        parameter?: string | undefined;\n        protoFileList: google_protobuf_descriptor_pb.FileDescriptorProto.AsObject[];\n        compilerVersion?: Version.AsObject | undefined;\n    };\n}\n\nexport class CodeGeneratorResponse extends jspb.Message {\n    hasError(): boolean;\n    clearError(): CodeGeneratorResponse;\n    getError(): string | undefined;\n    setError(value: string): CodeGeneratorResponse;\n\n    hasSupportedFeatures(): boolean;\n    clearSupportedFeatures(): CodeGeneratorResponse;\n    getSupportedFeatures(): number | undefined;\n    setSupportedFeatures(value: number): CodeGeneratorResponse;\n\n    clearFileList(): CodeGeneratorResponse;\n    getFileList(): CodeGeneratorResponse.File[];\n    setFileList(value: CodeGeneratorResponse.File[]): CodeGeneratorResponse;\n    addFile(value?: CodeGeneratorResponse.File, index?: number): CodeGeneratorResponse.File;\n\n    serializeBinary(): Uint8Array;\n    toObject(includeInstance?: boolean): CodeGeneratorResponse.AsObject;\n    static toObject(includeInstance: boolean, msg: CodeGeneratorResponse): CodeGeneratorResponse.AsObject;\n    static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };\n    static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> };\n    static serializeBinaryToWriter(message: CodeGeneratorResponse, writer: jspb.BinaryWriter): void;\n    static deserializeBinary(bytes: Uint8Array): CodeGeneratorResponse;\n    static deserializeBinaryFromReader(\n        message: CodeGeneratorResponse,\n        reader: jspb.BinaryReader,\n    ): CodeGeneratorResponse;\n}\n\nexport namespace CodeGeneratorResponse {\n    export type AsObject = {\n        error?: string | undefined;\n        supportedFeatures?: number | undefined;\n        fileList: File.AsObject[];\n    };\n\n    export enum Feature {\n        FEATURE_NONE = 0,\n        FEATURE_PROTO3_OPTIONAL = 1,\n    }\n\n    export class File extends jspb.Message {\n        hasName(): boolean;\n        clearName(): File;\n        getName(): string | undefined;\n        setName(value: string): File;\n\n        hasInsertionPoint(): boolean;\n        clearInsertionPoint(): File;\n        getInsertionPoint(): string | undefined;\n        setInsertionPoint(value: string): File;\n\n        hasContent(): boolean;\n        clearContent(): File;\n        getContent(): string | undefined;\n        setContent(value: string): File;\n\n        serializeBinary(): Uint8Array;\n        toObject(includeInstance?: boolean): File.AsObject;\n        static toObject(includeInstance: boolean, msg: File): File.AsObject;\n        static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };\n        static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> };\n        static serializeBinaryToWriter(message: File, writer: jspb.BinaryWriter): void;\n        static deserializeBinary(bytes: Uint8Array): File;\n        static deserializeBinaryFromReader(message: File, reader: jspb.BinaryReader): File;\n    }\n\n    export namespace File {\n        export type AsObject = {\n            name?: string | undefined;\n            insertionPoint?: string | undefined;\n            content?: string | undefined;\n        };\n    }\n}\n"],"names":["CodeGeneratorRequest","CodeGeneratorResponse","Version","jspb","Message","Feature","File"],"mappings":"AAAA,oCAAoC;AACpC,8BAA8B;;;;;;;;;;;;IA6CjBA,oBAAoB;eAApBA;;IA2CAC,qBAAqB;eAArBA;;IAnFAC,OAAO;eAAPA;;;;iEAHS;AAGf,IAAA,AAAMA,UAAN,MAAMA,gBAAgBC,OAAKC,OAAO;AA6BzC;AAWO,IAAA,AAAMJ,uBAAN,MAAMA,6BAA6BG,OAAKC,OAAO;AAgCtD;AAWO,IAAA,AAAMH,wBAAN,MAAMA,8BAA8BE,OAAKC,OAAO;AA2BvD;UAEiBH;;cAODI;;;OAAAA,gCAAAA,kCAAAA;IAKL,IAAA,AAAMC,OAAN,MAAMA,aAAaH,OAAKC,OAAO;IAwBtC;0BAxBaE,OAAAA;AAiCjB,GA7CiBL,0BAAAA"}